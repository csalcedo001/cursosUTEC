(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    693994,      13383]
NotebookOptionsPosition[    687417,      13258]
NotebookOutlinePosition[    687758,      13273]
CellTagsIndexPosition[    687715,      13270]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["2D Automatas", "Title",
 CellChangeTimes->{{3.766866464871593*^9, 
  3.7668664703862143`*^9}},ExpressionUUID->"488e35cb-e272-4d01-916b-\
22fff50c483e"],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellChangeTimes->{{3.766866476983264*^9, 
  3.76686647797812*^9}},ExpressionUUID->"6665e2c0-9d70-4433-b747-\
a79b1f7719e1"],

Cell[CellGroupData[{

Cell["3D View", "Subsection",
 CellChangeTimes->{{3.766866497960677*^9, 
  3.766866502663445*^9}},ExpressionUUID->"672478d3-9b11-4af3-a9bb-\
59cbca6d4685"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gameOfLife", "=", 
   RowBox[{"{", 
    RowBox[{"4320", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.766866788135024*^9, 3.766866796810041*^9}, {
  3.7668682972534933`*^9, 3.766868298072444*^9}, {3.766868435766836*^9, 
  3.766868435925708*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"91a4720f-2c3b-4210-83a3-16351e965970"],

Cell[BoxData[
 RowBox[{
  RowBox[{"initialMatrix", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.766866515333157*^9, 3.766866588575635*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"67f2244c-b8fd-4458-9383-203c8ac3d95a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics3D", "[", 
  RowBox[{
   RowBox[{"Cuboid", "/@", 
    RowBox[{"Position", "[", 
     RowBox[{
      RowBox[{"CellularAutomaton", "[", 
       RowBox[{"gameOfLife", ",", 
        RowBox[{"{", 
         RowBox[{"initialMatrix", ",", "0"}], "}"}], ",", "200"}], "]"}], ",",
       "1"}], "]"}]}], ",", 
   RowBox[{"ViewVertical", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766866510682982*^9, 3.766866512133255*^9}, 
   3.766866553263529*^9, {3.766866602535037*^9, 3.766866614492708*^9}, 
   3.766866656211895*^9, {3.766866799792047*^9, 3.766866817900779*^9}, {
   3.766868452649396*^9, 3.7668684527819653`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"a5191f3d-9dec-4f81-9fd8-797d113b34f8"],

Cell[BoxData[
 Graphics3DBox[{CuboidBox[{1, 6, 9}], CuboidBox[{1, 6, 10}], 
   CuboidBox[{1, 6, 11}], CuboidBox[{1, 7, 8}], CuboidBox[{1, 7, 9}], 
   CuboidBox[{1, 7, 10}], CuboidBox[{1, 8, 7}], CuboidBox[{1, 8, 10}], 
   CuboidBox[{1, 8, 11}], CuboidBox[{1, 9, 8}], CuboidBox[{1, 9, 9}], 
   CuboidBox[{1, 9, 10}], CuboidBox[{1, 9, 11}], CuboidBox[{1, 10, 8}], 
   CuboidBox[{2, 5, 10}], CuboidBox[{2, 6, 8}], CuboidBox[{2, 9, 7}], 
   CuboidBox[{2, 10, 10}], CuboidBox[{3, 4, 9}], CuboidBox[{3, 4, 11}], 
   CuboidBox[{3, 5, 12}], CuboidBox[{3, 6, 12}], CuboidBox[{3, 7, 8}], 
   CuboidBox[{3, 9, 11}], CuboidBox[{3, 10, 11}], CuboidBox[{3, 11, 7}], 
   CuboidBox[{3, 11, 10}], CuboidBox[{3, 11, 11}], CuboidBox[{4, 3, 9}], 
   CuboidBox[{4, 3, 11}], CuboidBox[{4, 4, 10}], CuboidBox[{4, 6, 8}], 
   CuboidBox[{4, 6, 10}], CuboidBox[{4, 7, 7}], CuboidBox[{4, 7, 11}], 
   CuboidBox[{4, 8, 11}], CuboidBox[{4, 10, 7}], CuboidBox[{5, 2, 8}], 
   CuboidBox[{5, 2, 9}], CuboidBox[{5, 2, 11}], CuboidBox[{5, 2, 12}], 
   CuboidBox[{5, 3, 10}], CuboidBox[{5, 4, 13}], CuboidBox[{5, 6, 6}], 
   CuboidBox[{5, 7, 6}], CuboidBox[{5, 7, 10}], CuboidBox[{5, 9, 6}], 
   CuboidBox[{5, 9, 7}], CuboidBox[{5, 9, 11}], CuboidBox[{5, 9, 12}], 
   CuboidBox[{6, 2, 10}], CuboidBox[{6, 3, 9}], CuboidBox[{6, 3, 11}], 
   CuboidBox[{6, 3, 12}], CuboidBox[{6, 5, 9}], CuboidBox[{6, 5, 10}], 
   CuboidBox[{6, 5, 11}], CuboidBox[{6, 9, 5}], CuboidBox[{6, 10, 8}], 
   CuboidBox[{6, 10, 10}], CuboidBox[{7, 6, 8}], CuboidBox[{7, 6, 10}], 
   CuboidBox[{7, 7, 5}], CuboidBox[{7, 7, 6}], CuboidBox[{7, 7, 7}], 
   CuboidBox[{7, 8, 11}], CuboidBox[{7, 9, 4}], CuboidBox[{7, 9, 6}], 
   CuboidBox[{7, 10, 4}], CuboidBox[{7, 10, 6}], CuboidBox[{7, 11, 11}], 
   CuboidBox[{8, 6, 6}], CuboidBox[{8, 6, 7}], CuboidBox[{8, 8, 3}], 
   CuboidBox[{8, 8, 10}], CuboidBox[{8, 9, 11}], CuboidBox[{8, 11, 12}], 
   CuboidBox[{8, 12, 10}], CuboidBox[{9, 5, 5}], CuboidBox[{9, 6, 5}], 
   CuboidBox[{9, 7, 3}], CuboidBox[{9, 7, 4}], CuboidBox[{9, 7, 5}], 
   CuboidBox[{9, 7, 10}], CuboidBox[{9, 9, 5}], CuboidBox[{9, 11, 13}], 
   CuboidBox[{10, 6, 2}], CuboidBox[{10, 6, 6}], CuboidBox[{10, 9, 2}], 
   CuboidBox[{10, 9, 4}], CuboidBox[{10, 11, 14}], CuboidBox[{10, 12, 14}], 
   CuboidBox[{11, 4, 4}], CuboidBox[{11, 4, 6}], CuboidBox[{11, 5, 3}], 
   CuboidBox[{11, 5, 7}], CuboidBox[{11, 6, 9}], CuboidBox[{11, 6, 11}], 
   CuboidBox[{11, 8, 5}], CuboidBox[{11, 10, 12}], CuboidBox[{11, 10, 15}], 
   CuboidBox[{12, 9, 4}], CuboidBox[{12, 9, 5}], CuboidBox[{13, 5, 3}], 
   CuboidBox[{13, 5, 4}], CuboidBox[{13, 5, 6}], CuboidBox[{13, 5, 9}], 
   CuboidBox[{13, 8, 6}], CuboidBox[{13, 10, 6}], CuboidBox[{13, 11, 16}], 
   CuboidBox[{14, 6, 8}], CuboidBox[{14, 6, 9}], CuboidBox[{14, 6, 10}], 
   CuboidBox[{15, 6, 11}], CuboidBox[{15, 11, 5}], CuboidBox[{16, 6, 10}], 
   CuboidBox[{16, 6, 12}], CuboidBox[{16, 7, 10}], CuboidBox[{16, 7, 12}], 
   CuboidBox[{17, 5, 9}], CuboidBox[{17, 5, 13}], CuboidBox[{19, 6, 8}], 
   CuboidBox[{19, 6, 14}]},
  ImageSize->{387.20062561863153`, 289.3638800024015},
  ImageSizeRaw->Automatic,
  ViewPoint->{-3.374212435539661, 0.24428358151590307`, 0.07082352470237158},
  ViewVertical->{0.04381571663248678, -0.998892320017666, 
   0.01715564005527093}]], "Output",
 CellChangeTimes->{
  3.766868300464731*^9, {3.766868439469102*^9, 3.766868453044037*^9}},
 CellLabel->"Out[21]=",ExpressionUUID->"fc79ac15-9979-4867-a919-3c91638e6d84"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.766866701136614*^9, 
  3.766866701182528*^9}},ExpressionUUID->"ea00dcb2-f753-49e9-9ebe-\
ab0a31f8f176"]
}, Open  ]],

Cell[CellGroupData[{

Cell["$", "Subsection",
 CellChangeTimes->{
  3.766868711348914*^9},ExpressionUUID->"29c522f9-1e5f-4971-87e4-\
42d5592ba107"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"Mean", "[", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "*", 
        RowBox[{"(", 
         RowBox[{"1.07", "^", 
          RowBox[{"-", 
           RowBox[{"Last", "[", "#2", "]"}]}]}], ")"}]}], "&"}], ",", 
      RowBox[{"Reverse", "[", 
       RowBox[{"CellularAutomaton", "[", 
        RowBox[{"\"\<GameOfLife\>\"", ",", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"1", ",", 
           RowBox[{"{", 
            RowBox[{"200", ",", "200"}], "}"}]}], "]"}], ",", "200"}], "]"}], 
       "]"}]}], "]"}], "]"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<step ``\>\"", "]"}], "[", "200", 
       "]"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766868779740664*^9, 3.766868783938699*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"d6d7607f-2a0f-4ac9-a2c1-ab6aa513b75c"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
8GwjFVf46qdxhoof/A6WxPLA4+ViamjenVZveezlj+x5crzKSCUNqiyexS/t
ZoDQquDnJUsY4BHzdWnJAyYs0PzwIFSMgBqL2IcK+BycK5znNXchHlf3Ng/n
329Hzd6dbUW8Xayq5aseCZ2Bh0UCxwl4VHstweIkAXlk4X3WYQJ8cz2yO4JZ
iFfWqV6KZUDjPQuHjgs0WGHSHSDVmANeS07SWW1FMGG2r3nHHgLa7H9T57rm
m36j6hBW/S3f8J/9jDxntor8Zxz7UHl7G7Yfoc8HonH+zn2nQB+u3/vdqrl1
JZIuOrkluL/BheeihljmfFxzH/cz6d1y4xTOl9vIWVH1BgOb46j+JXuXRg7j
cw5L3t7VZ6DxSl01psOG9OR3Zbs1rhNtfwIRDYiXvlx1NaBVrASs15rHLkM4
sHzHBn4r5N84Ljc6G8hXAotvRcoN8ZZAzZPnZdNziEev+X1oJeITdy6872xE
/lGdW7mcI66zE/ogLvOABfmOdeLr+Wnw60jTcd0BJigU0qusq2kgdZvksFia
C5vKNY01AuNh6eW/8+8sCFgtKqq6VZ0Fy+SW0HuQ3qfPaOkZZjCB1dvPdk6S
CZevLTp62I2AlQc/L5ZH87SlfKWVTSkL6tfslKZNIVzxjSshtdC61Ln/JeAV
CU+KWBPsGXR4nyxaNJ2D/OtOdsUdv+lQyj1hTfXZ4fjlgO18F3uzIdbrvFbS
BeOLTdWtpdjO//hhQvV9CyH7duNx3M87Y4Plv77snAse9OJxNuEbkcP9jjNW
kn74eqHELh3qHM6RZm2cl42SX7ge1++8KhpeiPmjwldpW+WkLPjdu7gIf+/r
mzleWB5Z06GE6+MWiGa14ryVhprdecyL4tcH8OHP03/XM4dxxHyiIQbX1Zy7
TCjh+7dua7ZhPFrV3upL/a7xhEH8P9rtzK6lnGNC08wNb71sRE7XMN9fQ/Y4
3NNG7WMUDX4Ux3rHXCmGli/Fd5yQvyzxNd1rZEsR/GwoPFV/HunJjz+19kIs
iJaX+uH4jgD/O2uOp1wn4OeHN/ceIHvOJVBkfuop8lM9hB/gdXRkSlsS768I
zFQ3x3mFrI8be/H5VXtum5vgPLq1bqlE8gCyY/c4Re7J04F3/cag1+fRPH8b
eCf7mAZrhH9lLEK8MnJ/DfvVLwVg7JOp39HLgJE9cDjjFR0kXqQaqm6jQcOP
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
/bHn9lf3EfB0D5dy/dFMGL0Vv7B0cQacfP94paY5A7LHvXpxHtaPbvOCWOw3
z6jPw/mt3/ZZrbS9SsDAEXL/yNFESHA5PfrnLBMuXdq7fD56v0OcCOBHcoWI
1gWc31fTb02d2xWPnKbOz6kZNlLzJd2dS53rVBKt20vhgPRCip80GLqaUPsi
46KVf++vz/mLuXywuXjStU1sVJ7xP3HCf9o/mXt/WEmpkOo/lDd1G8e3nd3N
KH3oWR0fTeWZ/P++5XN+Q1l7bQ72o25S4m043ijZxPYU2/9swjkW9wm0+Knk
hP0GG7F4PV5PRkc6THB/BWd/w0j8fqbLs0jcT85QnHEe48F8M67j+PvWnjNV
GDfyW/a6YDxp+mzbEul9yA+IpvEWThBQ6ZDItT2CgMHX73zWlxEw3HdWruA5
AxpdA2jn+HKgbFm2hDzi+Y/Ip46HaknITGpRSL1JwDdJlvITI2jdvvnu/yyM
Bsa8hZPJCJd8HGKWFocy4UWFT5QCWmex29mO3EIyI8S8w2SahK9+V6ryH5Eg
sDH280A2CaM1MXYJ3QS4l81LrTIjgW115YUL+SQ437NIHPlOgqvny5K9ckjv
vW5EbmhE9v/STctNGuj1JZptUh4kfAuzLuK9S4JeWeybnU0kREioHNb/QsKW
6Ptl7Vxovc04lkjhc6Baa+OxPfPobTdiYHvw/xh777ge3zBgNG1NSbRoCElp
SKXoUqKpJUpSqaQyCtmRFNJQEaG99/f7fZIoQpGUWRpUkrQUSaLQOPf1vG/n
dX7veT/n/HV97mc/933d1x7nJ0+xxMn+8vwzsoaT0EW99nfHBinIq6I2PH5D
QfqOP56JnRQszp6I6CXHax+Urckkekjtvk5vV24WNJw1KdRQIHL5TulEzPt8
p37kYDnhH2Hc/vv0sG6Be+GJL+Q9x5dV1ToSPlH0UFsf6/tv0Yzl4iSwhe31
Jux7+bp5nSz2ERTfYtd8msAHX1yLMO9adahXpZDoH4UPexdWRWdCqUyrzbob
2dBetkSqX4BB9vO+1ZIyTDg9En3Xj+yPsc2z3k7w5gL7TcPaxsRCOG8ry36o
sQA2tw62T10vACMZJfXf97OA+0FHdwzRZzQ2+V7M2E+BuK2tWR/5zri+aO4u
7H9mbd7tQ6D5n7adawh0Ph3XxEdgXMRSNkEC+ZOYecbkf3Jk5gqUkfGNFnch
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
SYiPbnd6Gcg/UiL3aqNcZDLayo90YbzeWqafvP+btZ7KPewTOjEy9yWZ/21i
jPkq4hR8+6C7LKuSgldPlKpPZVHQIrFPkJVMQaOvu+wZoveWvi37vCaV6LdH
05edI3g9VqjSoPqHBStmrj3FnkNBzb7rCX/PkOsmePIMCyhoOFLGGCN6yJ09
WndFCP7PjWgWrmyhQMHCgCOP8EXLzFRnV/KfbzJufk0i/zdxNpvmI1826ZX8
ay+f5jPTdo3pOhzT8dv/tWO4Bu56RsffjFg/Q/2r6yNXHR1noLSNjqdOepDQ
iPOjLue1HqF+SCwn8hM3sYE5CI9Fvt+FespK/5N0vXOOV8N0vlzq5y1dqC+7
yaZwtqhgvOjT1/Hk/znfR8S5SDFg/GSLcefrfAj5kbQgmC8fhoqrtEyW5YBs
3fjYe7MMMCrebXmuKweETlz66JPPAN47nl7ZTQVgvEhAJ+0aC7rVZWNWcVLg
7Gul2Ev09CUOpzI0ZSlCl3gbXpN1sLvHNu5E5Lw9bmyN30bI/A/1dZqQfbMy
ZuULxTlEftNmvYwg8qO+rVHue7KvNUa1bleKFoHSr0R+tNc5fD6tiX2TbYVa
rVDeebPEQe0L9hXvqt5iS46rxpx6hfRTjzP1DdLZWzuWc2J/2ZVuVkUfyXWK
K1bWDahhfTVFUZzf0qBvcTg/5ysPptN6g4XvVTrPX8iTzuOV2OLdg/Ound12
FmGwmaga7sd1dX8O/SV4bqI9MjSJfCnYP+Pf+Ii/M7Rqmv9f1nWaj5hJrbZD
fUJ0dI0W2t2m42yVFHcrYn+N13rjAagn5LTWbET9go9N/zXKl2+K3pj7EVgr
Hr0fj0/lwBm0I1/rqC/D5+n2/mJiHA4vQ/Mb1kfIerx6H84HX8TJJvSzLhnq
3oJ+rr1WK4uRT+Run2DH5238qyqLfpKA6IOWzjT/+L2+dXxYn+30lp9mRd/0
d3uJbcS+auF/3Gk7HxU1fISOC/mf+lmTdeHMSUL3FsTs8Gom+6fucPw79hUU
yCz2jhTvpGCfVL9uTQcFsXlPQuKXF8KggorEq/hc6G84VrAkLwNeSh0Z2jqS
Af6SdgeDBJnQJjEqhXWjA7oFFIHg6eL1RwN3EfrSZic/wUv4g8TfXP/rhP4f
uvRZwoPwK97+Jl1veSJXtmm07RUpgoWbfJ1WE/yqvua4ay7hOzobzcS+9ieD
R3jsaNBCss9/2IqkEfqz7VL2vusELv38qhT91N3n3tz/S95z+krbcA35n/Cd
cbljhH7l2d9lsZPrOMWK7CYJ1Bc+8PwuoUNWHGpyueQ+i8r7kwlE31ga63eB
EiiCJ/Ja15/8pOCSSZmZCtGnuhWNIuecJXqHT7uknQoLdjTk9WVvJfyjTvD1
lTgmvMzwEZecR/bl5nEFJ8KPIvx8Cy+Q55t2X0vxI89n2/LX6Q5LHlT2FBjw
Ix956l0xFSoHWcqbBpB/PP2UIKlCoOD6t0ZYN35roNAKZYKXgzP2LPTF/MP0
1nysg6LG5xhkQWDcQN2D0UGiTxjZZN6Py4anPbNgNUcuRM85nXyAjJ+vHJI5
0poP3eNqa6vJ/TZqbzhQ7tip1zwX67Qt6Trjjf3S73Z2/jpC3te56mN7BoEG
JeXG9lgnNNKcukq+e/O+5BeiZLy2y/Uv2v+2OmZ9QvubSKR6ykxyv9ZI2949
5D7d+uaMtWS+rbLe3T1MoEOxftRWMu8nvo8ne5L1YNO3nWkloQBs41vOU0NL
QfupITNu2f85LkXb3Ja2By3bbS6N+rLXjvow9PeVdi+fwvfOTXIyjiffdeVN
Ru968v6n74Xvf5xP9H/3EoMQgq/fDQajdcIpmNjcr/L5CAuEYxUfBT9gwaYh
L8ZxF7Ku3IsX302koG3mHbk7VyhQb/it+NeBgrRUtWXPCP4byJdrzdakoJzX
WF9iHwUv0r0qPt+iIJFHdlnfBwoMHar5H5L/W9kWsb+E/F9UrHh4K8Grmf6K
hxyW/698nppgHTqeZ9pOLT7kOY7QX7W78l++8t//P64bP4R6hFpqBS/dZyLq
4Cu6j2SEEJ03tmLfj3Xo9/D1eXwX/Z0PwroWvqb5lkkfQnPpsljUS4J5Po4i
XTq3bkb7/8hT5NhuTdaV8h4TQLvy9fIGBu6fplJjpQeHmMAyanj/xD4XPi/Z
Z9nKlw5is/fY+p4ugEK3We/WCefDxazbTIhnQcruGPd8lVzwv37g7Ek5Fqhd
/cARXcyCmdtejvgNUCA2zPU6p4QCxSPSUxpEP3/6xu+V+RgFA+a/j+0l+9k5
ybbenoztrTm+5JJ9p2zT/7aR8GW2AG+NmZ+Ifuh0/cCtUQrMOtMbC2UJHow5
sJCu1Ujzqo8S/JuIXhyhhv+tYh+IUHRGosJrtL9y3+fG+mnblrTevfvPfE7T
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
6d5LCe4eZ+DbLKfaVFwvGmxpxQfIfPOuyCP+2q12kTeIvwTb2E5jPbED4Dcn
Z3P5qD50/GpaoYXrwSooo/8d9qfYhta2g2iPLCzwW7gd7Urm6VvVCrg+o+68
6BLhxve6UtY/iHYC+/yTj7hQLmRWnqeR/BgPRU7uf4x8qHiWQfWfbCiUObyb
e3UOlHLKzZGn50DKnbhxfbM00Fycmz0beZXKpwiB2cgvJkWNmzIkciFCV8Rk
Cp+37OcTY1eUuet6/pK6nmOe0ioCaC/8CkrnSUec9T6/9Opu7Kczi5KOCf2k
oFUiXBy+UXB1if6UEr7f+g3OubGIJ2+TLT7/RfzjmtPNoYJ6w/Bk1gNXyxi4
vsK5wjOJCc1Ni7QCXoXCvGv36G6idNj0gKOrAvmiZWdq1LaJVOgbOLlP80EO
FG3L2bAB7YjauAsbc8PvwdHK3Ww0W9S3Jdvzj48lgXl278WLV7OBseiXKdlf
auU5+flf/IiWK2glemF/xf/xAw4rvveL4MBFAT+W/fkl/aUl+T6X4CdWXk5f
07Bicr5x4DGDlXeCnydehbQbijb6kN911nbKkN/N+Oue0jBmxbnHPD7Dih9x
cC6XZOWDDmd8PtOSDV55G78ffpsJhXS7s7zxqdA4/NvUwCsZhscSfp0pSYPT
vx86zDlPg/EGwdVxi9HuivDIEKZowOYyn8pCO+Mrz7UxMdEcKL87VHcsmgkN
c1OyVu6mw9yMu38stdGemmO/SPU6E6qKbvtqoD0X1q0S0ThIB43po5vzz2SC
pnJLSv35LNi74n5VvV8m9Ll668ndTIeHWypyBoNyYPqHX86qLXT4Ov9GoyCp
ey+0+0wK4sa7Ew6WJD9R6R8JIHm99ZWaLUi8X1WJakUfqQsU/qSQifOgwQTc
a+Lc4In89n3331LgWOfutwrtKGZbodneLhfg/HSm7SjiyHvv8vPMGNQPTmJ9
S4+iXpCbOvfyPdrNlQ02ug0UOG/bmlSD64atU3S7JNMVmFvdaraecYHvo0vz
M3F9pg66mHTJ58KrFSqqS3F+rvdX191B7Nze1B4SR691dVVcD77vJcUHG8qx
fcM/3ecM4SX94pIk308SR8cBsl8EUnYhxI85iW7gxMq7ciAgnoznjkOuX4k0
/CMhc6yCApNNp/bdfUEB/+n1jOMmaBdrbFb+8IUJT8prmzMLKOA2VNcQQT53
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
hwtrAnZx6k6tKL6O+NEbcU8TcfqCOv8KxCV7b43pWE9aK6piO+KGmqSkCeaP
Pv3nrjfOK62XXPMZedTci+J2aN+lTbPC8Vsm6+3CGqL7C7JXFm2zpsEhueZK
LvG3aMaf83vMKWhOZjXvInjxqGrB8sOfKXD+8VLdSoQGm+iGKSnCz7df//Ez
qoyC+BceQSOSFPjXjvr+qmCR97Mq3dShAOTTVM1vx2dDwfeP1mlShB+vfX67
iZsJg5ffG9ksoiHC7cGqk28pMPFJqny5jgW8d6xkSjRyoKdbx0y5Pxua6mJa
Z3azIVh7n/49VRokM7pSDSfzQfO+AjvcogDMpnVyRx+ioKp+58+3TxjQXrDi
kEgLC3hW7nprE0aBp5j6aCzR0zKbZvuVPaThyfrjokWEl7pu2/XmWzgNQaIt
spY0Dd0um15nk/+/4tJiC519NDyOm3ZKM4/ojlnPeRrIc5afGNoWTvDj2/j5
8PoxCjb2hj+X1CQ6xmJUOaSGgmfybUtR71ODIlW2mC/l94GGeuKH0z86KOzD
+ff2e4w65DHimz/he/P9WNqNdtLiHFuH9PNKx6XlnioE/89+1XIl94ly68mY
KVoIEk/umjGiaXAv5jfbeIPEvSNGb9PtaNBjvJOXPEoDe4HuNJ8tRE9wyZ47
bZcLgseED7TFZYLFOuPE5Wn5INbB2nCsJQeK9r4akD+cCn1hTJFjNmlQ2n/K
f9XbHPDe37nH/FIBPKz/qd4UzICgNJEjx/eQ9/mo3DbzExvGzvHk71KjYFTm
l/fv9wVwV+G8vLExDbVJQVOhW5gwcm9f7HmHXJCZjLkQcCoPPM9ukRz3yQWD
1cG1xkR/lslHratcnQsTPDdi28bZ0ONbzT77gAk/09u81+my4NQ86dZsHoq0
R1lhWhELLu7oua4/WAC9lW0/BN+mg6eau44y0R3yMc3jy9dkQJNXS0x9VgHI
uowJ+EinAWOB2IDjmXzIea/j8vA8BcFZQuPiSjQE9hxpSnlKQdcOjd4oORo+
z0/gfkDRkHvYcGk1OXbaXZNdbElDC1ODf+EpGnwqzQ0yCB9fp5yxc1SoEB7s
DViCOiSaH1bjfMX0gMFtOD6fvWNZbBrq+fkK+9C/xjKLfuO4c2fkrnX8xJpt
V+vG8fVTNhv7vpL37VhDDeP5yA2fWzh+CVtir6flwZ4N7bOPzGDAT4/czYFz
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
ccurzado6HWdUTR7hIZvdetv6JO4ntq7VY7mJe+j9snGu7jexuPU80LSP4/W
Or7Ffid+obC2GPOTd5rWI15ky+lz9vMvCvnghv1fuTc5F9v/fayPE/arydLq
bjx/+XzMoX/r9x69peOzP9BwulGz+CHhk0tFXrd9LqfB+9uaTQ93EPyyvfGz
y5+G2B9VNxvcaVCKE7u7rJe8rxsa+03f06C7dInA2r1suPPhdFfO9nyQy/EV
mhVcANv62wot1lMwuSh9lp43DbyaU87rPSnYpc83K/0QE7YIDt7gJ3w+23Zi
E5djPjQnx5zt0MwBZ707JQuj8+BcDL9ZFsEN+7Bm+TJp8jtjsu+6nSjYoJXy
vGIzBTtbdhkWEdy/a/Deda4gi8Tfw+XXy1gQGljuVTtBwaDSE2Psb7WnhppL
VZPB/K5/J5dxOqh1tjgXzCZ6LlDluC25f679Z8GDJP5P5e1ubLJjwIXrgdtd
6nPhplm6qdxiJtT8WZASSfTQChUt48rlNHydu0rkDcFVr6mUfz6Gk8/TTiyf
8ZCC1KrZMqwICqZ/gZzXPTQMfxV7lUF05KOy+QdHZpD3OGxxxonoEKthpm7s
BA3yP5cb4vrIwHvd3dnEpkj1CWPd4ckRrYXniE2Wc3+J+erXbTZeOA152CeV
aMQZMfdBU4xnCU5mGpi3ZN1OJUEc3+qVSlhli7hz6X2JB9Fn3O3eIeqhWfDz
6bOZJy4VgFipoU2cHwXlOgFRX60YkBjbeTAx+waE/Ra279iZBR/+iC8ZzMyC
lX4ucKM5HbxK403Ep3IgyKBzd3J+JjiE5H5+25UDQtwvxL33syHbUWH6nnKC
n4ZVKld+kfYvCfncaE7BAuVjn6aLknjo2bOwmPCdb2IKrhjfAxSOJiNPNh5K
dQgj/VZOLONjKbEa2XKyOwnOLEr2F+0j/duylf/1MxKPbdjyy5wIXjha2n8d
JXH0EFev+B9yXWXhoPQ/pP93eo47I/9OdJwwwvt+vjDjBfZvATXt/H/XBZqZ
m8WpX+pmPT0RrcANLVG0VaARj98T3+4XhPxqMMXPFsdRuAMF1uA+rJBQpbE6
3Hf3bLeIGPl8f2fhbXvy+/VF8wLycb8Nl3CrEznv8PRd5QPi9yKlUruiyfP6
lJQuOEX8tcNw53E98n8iG6WEssjnXHNjrt8m18WfXRknivvRGz/NwvxkvrNd
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
znjsS4fNnLpL7c9/c3QGz6OleFyud+Jx27/4wO2ixkV4vmr75jDEo4hdmQZo
t90prEG76wlLDP0AfESvIq4E1aVMIj4cqNw5ge97kcmN2ehfM8qUHiqQeGDl
6n5OkfQv+qDKgDzx24gg7SJ1EjeyZ4VWnnSgoX3zvpSQIILfIbMbGx5RUP7a
TGnZeRp8mjsuBmbRoJN503SCxN3EutZlH7kKwfViaXK0JsGf3DfOReQ9MozP
XM5iEL9oXPv9Jblu50X5xb8essHUdsDf6wsTePYFGRy+mAO7XKB6MjaL4Pae
xisTmdAUZ/Ft2CYLJkQi2vv18uBYx7OIV0158MnJol/Flfo/7bl/WaRZWT8N
P746G6V/oYFeZ7jSivAQBRmvXbvfEl4inXYS8yPyJ9bsFyHx7suGkmUbiL+n
+/lY4H6vZk+bnh0kbin/GFqD89JzMmKO4Dh7RK5gnyLRwXsFXQ0V5pE4tKrr
0Tfi/3J9FXqYH2hKJ70+kMQz0TfXXJB3Kaf+OY/rFNelPjbDdew/x2q+cOJ9
oZgfvrcDk73JiP+aPzd/RJvuPL3x3/3Ax6fwEeLHrj3J5YgLm7O4Y3C/c9u6
hYeQ98W3l+zGfVSK0ucOof53i/I5gnnTMu85/ME66Pr9khXXMe9Vj8kpzKdx
oHXaApwvUe85NvMeOU4J1V4ROosJj786Js/1L4DMUT+H2g95wGyqW6/5KhX8
O0Lrky6zwWilYeRgCQ2nyh9KtRCcz2j+priI9BOZesszx0j/GEu5mo/1/z5Y
XQ4MJvbL0OsjmCeEWfrKtZi0b+PLL3Nw3nxNxt7g01g3UCdQ+o0iie+CacrK
pN2WBZ9skiTf+ynD7XWfXHeWuacc83XOlWoK88H5khmQZ0nu4/xDql6CtHeq
ptbzKXI9tW1wEZDzo7qblYawDmfRnzism7O1ulEHcUP2VFoq9mvNxpGLyJN6
fE2qsZ1LuDw5+8r/8rG/uv6wBOvTv/naX1yRW1rrjHj/d15d/8Y/izBvzfXY
F3Hnyfv2vkrfxLqh9VJv1kuTYz6hq844/qtlvq6ineDK/LidVVbk+U51TQo7
ketm8Mq61JDn7srwi+/F8bDdmjotvmyQ/lL6gplDQba6kPvVSgp+ZQXdFvxJ
wUyZrJJNk0SHhDR8cZvCesaDr4aSabBrWL7iRz0NPV2RNdI9RCdT49XHv9Jw
l5fbznCchn/KNpXh+Fv3hpcxWCcRNL1WiyrQEP4n3HNeKdEf5S8ejAANFRZr
3Z4TvzBhH9WTmaL/1zwh/6lLuD60V/685QSVh2uNDPkcYac91yUNrI/1+WUD
jj+FbLw3uhV5Uc+sYsSJVO/VZogjhVUNvKhDFqwK8cL1gdtFVt1E/Ll4GMZx
/aBcw6Kqmv/yuzWZKyW5CR4E63ApviT+p/Ssr0mEtJ9mbLUHS74QZgm4nmcR
vth7pMvxOPH/L80uzSPEz/WuePiNE5xJaRDweEl46/sYQcMM0j6T2g8bt/KQ
+634+Sy4hoY0yUMaMwYoaM+r27v5JAXej1+vbTfKgp/vBK/yPciG/rcaxT5c
efDDvNivYHEu+JwwcGIPs0DTaOtl17n5YPVPqJIdKx9Wzn506TDxr7pprxaO
N7Fhdga7eLiMCZ1F9xfXV7AgLvy9iooHC8yEpz9rekruR6tsqF2WBaX5RQGy
JI79EIlzf1NdANqOmVpMoj+4bco72v5L+/9n+6wxz3/37+tk8r+v/fdx/OdX
w5w8mqGpnM+vP5rGiTeulhnv0S8k0+5fQ7xQyKr8ibjd3npgJ+KDtYFcFOJH
9fGn+uhHOwKT7+PnUh7XTNC/pJQ8B58Qf56V90JBm7wPt+eN3knEj60mOmaZ
ER55d8DCdoD4rTZ9+2t7AQ11IxIXVBbR8CnOUM2xnYaAqomfolhH5KCTarUo
iRedI7pTXTQUelGmb3cS/Vh54UTYRdKft5ddfS1Aw4CAhc8YzjdwHb7N50rD
sJ1K4XggDa0tIqGXUhnwlW+ZWYVHJhS2xiWOhSZB/IyZb3fTuVBb5cEn5J0N
+q5GX8zuxYFP3YIXCyZZcPKP2uwUolvPuv/zxoT0l3WVOyS6CE51iIWdciC8
i+fojoCLRH8stnNv1SD+Ma3ti/heAcIPrsyRnSR+nJNl9v4p5s02m4jGPGIW
B5cAxts0L9tfGH9rNubeyif3D1yUKVL5nQbF7Y/d5LD+w9GSQUESF4LO1Y3j
/N+owaHjyMfkHj+6h/F8gbvvY8SPvlJuHhzvdZRKq0AeO7Xp4zeMX4HKuzfh
e2uNXViEtqGd985ILA05Sux+xJktv+N4cXzqn533XA9g3Np84gHe/+C3c3qY
12JNYNA3XNe7U5N3JJPY90oiYcj3PMff0DU4T2Yuq4z7Cblam1divuRzEoo2
uC+tc563N66bPQ3Zhgv9KNjeIMm3r40Bmq5PsgSFc6Fvmvex260FIBMeMfmd
6Pco39JttxyZINZtaHVNKQ8CRX09mwg+lFMtKZkkPp54KSGkIEv85f3l86PE
j4+Msz9h3s0BI0Yp5vsUHq2xHyb9aTTwy52lOP5vzP9z33OiA2FRWQ1pz4Uj
HzJPknZcsX523x/yvTzWhx0r1XCee9CpE/PM2vdJJ0qgnvsxZx7ph4kTHhsn
iZU03KC3ldgcnsEkPXJdcmdegRT53rSPLmeQH7GLg+oQRzxfO3P2uT1bK2eC
fiGfoyH7b7+qP7pM+L/pj79+2s/sHDXCeRyVxdfx+98Ocafj+zGPkNiAcc95
iRXjJWnPrfsXhI/8y8Z6+XP2Z7y5EhTvhfl2Z/ufQT887PV1Cdp+9chrvflM
+DY+M+bP/RzouHz9h10aEyRSZlyvJrxWavS4tMNFCoQkTBr5oyhoVXgVvkOH
grzVXAFrj1Fw9s8+zxN9NGiUtqYYvKDBqXcTCXZEH3bauZm8pKHZlnriR3T2
RoUMXWlxEi9ubEgrJvp4/b34WlVDGp52+qgOP6LhnHvDhmDMS/xWw3HLJP1/
jVv9Z3voP5MxtFRwgznfAieGGomfD9Sf05GnodIoc8TnzHFIYYjlqNM0XB3x
44y3ch9Sc0c8WXQoci7O6+8JfiOEuJFef00d/aFhZa8FtqPSvR3fcdxq6/sX
Uji+K3gl/w/6xZ5ZBS6HCb/L3mA1sov0HwGrUI1qggd9l5YYeRKr1LRtWQCJ
U5T6pyB13D/VUT9Hi+gwbgUD8XLCM/bfFB55QvDG2Hvbkgzi9+GZfWfw+5OJ
kcbGRJ8dP19XKUI+91FcqD6P4Gya/Hat6GYKPkUwQgcXsGGkYGg9xVsAKtIz
mj5eY8FQjG3CjDzyHvwM3H2taCjP3MjXu70Axqn3BiPDbHAsnr+14yMbRNyU
aq/LsED5QI7MiVg2xMy/5MbuoGDTeQ95LxLvtBymBVlvpMDX+2LRp895kEn9
ftJLcCNaKWQ26g3pyFxOPd+xO7Z+/+6vsoE2YmgD5v5WQZt9fwZn/FVEtq+q
7b+8t7+W9fbsSzx/jHrJ4vDT/399+47SEE7d+cI/Gpx1egXvG7U4dR7fS9oi
X/pHS/0pjkuqTa7/CE1E506+K9tAdISOyOzHuI59xl6WTSp5P7xCYc93k/bW
YNsdSpUice6GwTjuV3qWLSh4SrgQPPgs3avI+2n37lHcSvSJhI/17sg5hTAh
vaWSl+DBtsu9/TuI/lj7w2X/BMH5b3Pn7uLzpaGR0nyi/J6Cy0zezol+CnZV
dSytPUPicfGrK0L4vYyD/hVeFDwfYGy6xZcNZT/e9NjvpED1Qvjw78+5sL4v
ZEm/fRYwTG+fHEnK+/8Ie/NoLKPufVyFEIqQQlISoWgQhZ3SRGTOWBJKlJJK
hiI0qaQQMs/DM92ohBBCmRJlLkOJSEjSoH77PGv1+b5rve9av7/2uj2e+7nv
c/be13WdYR8IOlBkMVskDW5vddI/J4v4RV9fbYN+f3KNhcod9IewnWau0qhj
H92/JbYA46syvUiDjvr2t5SBrSvqB+VdUsfs0J8qV36RUsX3rfnMSyPj1JLi
WxvPY74dDX670R/j/VMYbRupY/T2ptCrZOQrqwcqD24YpyDiLUOzQ4mcm5Vu
QvLSJWYWkHlqo7G7v0hclAtIGhH7u7l/Fml3etHmBKLL2zRfeBL+paPK4Cfr
TkK5iwRIPfu0BaWepr+wXUIO+/RTTLA/WcvFlUjB0JOI8Fp8DvPWhLVk3e61
tzcNnuM166nS+2V47R6kvY7gxM2r+jtIvqqe3cq3CP++8ofgXXL95JXdaTI/
rV31SnAD2Sf9i1FGzkk/YFHZeugAC+Y6r4i2UEqDZ29dnm0WygDOhOL3dh7Z
IKg4H3rTGPDY9Pz9Z18wbsSc3mrJZEAYvdbtxKFkeGjVWaBznAHn8hT2OmD+
Pucko2+H8Ztuty/9J7bnqxMfrhK/Gb7T10Tyf3VhdnqNIhmPa9+eXEGB4oWS
8Z8s5M9HwkXEryFPrLM/2zCH1L/KmaOOOKFa57uID3lMzvM/YirIA0x2VLhF
Ii8w5Irt/1VGwS6+9z8ZmO8Ui+7dmkXm0XWk75I69ev+bp1gn1s6n84+l+zY
awX2vIftTdYZEgct4dOlhDf9WyfyL66GHI+51SOfH/4wHjWF+fCjse2hxQ8o
EJ4TmcaPfEP6dUsW4zPynI6K5Ur4vqJVhcIkzyWOXhoYPH8eTl4+C9K6PnD7
SnghuX/3WnMLEo+cmlbsc1lHq0Vp5DmOFMVS5DmeFqqcvo+8cvoT14MHhnSQ
rBUSq/2dCpN5cZ29h7Kg6+yz0BNHMuH6VEygaQ0LbCV41z94zYQkgyUKY3kM
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
RvyttspOtfU/cOPfvtl/8x//+vXo3vnz2P37flPBf+oc1+Kc2eQ6R+bypNkM
BTyOupJfJS7DrSGmsgzyK+4r18biMV4chENzhv0ouNa/pt0W8+qHFuYTWYyT
EM8jUSbIS+7cyC8LwX6sGa+rX4g84xyf1tk70xTczndYkYd6hlG816t3Aq9X
mOY7FKOedf38XqaBguDtr79Woa62ojfPkduHuvilu2LNNvw/uV16RoEUnAnl
eaiK+s/jZpU6FUdBXvjC2d5yTFCLa3u3fxcNZEz1OF7L0+Fi1fg2xlgmtJ3J
TLyunQ3ThcXy2fsz4bL/9fZAdbKuK1CA7Eca5N9umI/PezZ/2eW3GC9PG7tf
8XPnwvRo33UK89Soi3HNYvSjM1HXH5ojLwtqMh0pxngwXyk6ZxD9cOqQwWty
3qvFGqa1JlnPY7/5Oqkj0qos+56Mx6plPmSvR++q73Mj9UB+Kbz8QPRFQK+d
A4m3LVqVx4gOL+CudHxEznNwNgn7gPGZJW3yNAnvL+Xi3uyykuwb/vNgHPOu
sGnG7A1NDMi2crfiOM4E03Xf0zVRN3PJ9HhXmbGgqjXhyzk15JObmv9aIJ4/
U1Ise0LqzUjGbHZAHJnQPXimlOAQ3dqK7G9OCW/gJfXLOCR3a8AsCeDQ3LNz
9OQimC/TzuWN7/N8os6d7H/b9Ux7vzbJnzkTa0jdvXT79a2d+HkjzVt4/Qom
DCwMTBoISgOTVGnuxMOo03MqqGvYjytPuZ9obyHn9V3km4O2l6E/7zDiRazt
R6s2fL/NSYbT5WjvBmz9JYvPV81ynbiMOLJNb5kg32zEq6i2n8+58D0GEzro
+P34RxvDH6KVU8jTvXAP41ExO6Gki4LFvIyj23spyBwLqgvzoOD6S5qLSz0F
kgbhjI3BmM8NAn8SHjS7tl/7B8mL176LkfU4sy8HzCfjVUE9aiMk3gqnn/QQ
vCiv5jpWx0v2qSlzuCNeXF6m0roI9Z3/0zN9psjTK3dp7t6YgvdN+fLbQxt5
1M2Fvp14/53Rq21+Mik4GHKzYBTjpIvK5hFGfb06K/CrxCL020fD3DySFPR9
c3sUPIcJlRXlR3WrEH/KypsMFv6/OFT0SQrLQL0R/iiloxXzzUmx+IrlmIfG
m2iDoko0oCZEzh/ozgbZa2o+pbnpsPPO9A8+Khs+3V5VpladDq++81+9L5gD
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
jPcVmHdQm5wL3TpOf3ATr8tMGreSccurq2xySJ2MbX1c02Rf2s+qPbd78O/3
5HUKUvA5uK7csQzE9/6U3iYUsoKcTxOiZ4i/U3e37e03fM+21fkD7ah3RsaU
9T3wc5PqpQKP8P/Tbg0GxSL+yD++LUvq1+mWi4eS+jw/RHMekvmUdYukOI6T
84yWCfzJQP+4kuAUYo/W7pqoUxm2o/PlKMacB3Q4nqK6L7qdBZmSi597d2SD
UVrk123JOfBosfGpJINMeC/NKZ23KxNm5p7dJeyRCY6m3gtL5RnQMdNvLIo6
48K3hy1Jt+gwyRui8Ls+FRx/8Vzpu5IOjIPHhMyXpUFfnJskgzMbxjsqJDg5
kCc+vva5zI4Jl0d231ID5OWin2w0G1hg/Fqzj/iR1oKaPju0Z0dnPhOd3WIc
cNOR5FG+N/cK/kdebRRKZ59Ld/TnXudMbAe/tdc2haEdkVaLIvl4pDWvlPhz
Y/3Gl+xz+GK6xUncyMTLD5L7py2VukV0rnLFxQ1kPDjxetYz5nUKmBkbT3kW
IH6oa+qsdaYgIH7LFSFbCl4phN0XvkPB9mSp55aoW2Xmvd/+uYKCYwGOZhZZ
yGd2vzpo5EeBgZVSq3FiEqgI9b0QbvOBR6sqFjWZpcDbMIYI4UWdn15Zkv0E
2WcWOhMct7k3MsOuv3BHhb1utsBCa19mYhZUXvB/vglxY83zr8KymBdlS359
WydJQRjXwN89d5kQ9XXkVXI9Ew7tTIx2l2FBWOf+jH0OdBiMrQndRk+CTw8n
V/mJpsH8u4v8PmVmgmGszb3Hzxmg/u3JgV9a2bDHepFIhmQauLTNdvKkMSCg
yuwhz0cGKGqHudpWsmB2dtBfy7ksWKp9bq4F6ulRpgFndV0GZGec/1Q3mA3h
+5U+/2jKhNHIWAUv+Ryo6ig5v3lvNiwR1BaQBwpOHA55aoQ4GpQgIb6lkQIR
7llaszHf1Y5dfx6LceKv4t5DzsGdZ72+rhvjwW3nO+sWtM0lXNds0U8/d10o
Hkd/P9Z3VTQ/lwXnmj3iQ6+z4Nnzmo/t5SwIGLMxcJqmgcWHwPsmdXTo6uyv
M+hgAZf2mqVB5ymYWPUn1ONPFhyTDo3XV8wEAX7lLFXzHLBVrj9gMMaC7RZ3
Fq+9w4Su/tNm0Y+zwUw1RUq1gQGplq/Fqz2zoKRX26tBJwPu9sxO5dPJgfM2
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
V2iVZkF60syFTyEJul736io5M2CR+N5bQu8oyL+uEbZtOz5v5otVr7B969bK
m/34TcHTlV2r72M/d/DGmfGE0GA1scZ0UTQF970L1X67cmD7HNn0Ioxv5a3P
iz3rafjpNnVLFttx+cwrC2UxnrJzN5Q8QD+/9cj/7diiPFjGLF2mgXxg1buG
WQUYX5Izzp317aBg96Ezs9wtWRD7WjVmvXwa7NKylZvK4YCKfP8LZ+VssBBe
1WWJ+d+m+tff9o8sMHKS2/53iAPL/hmctdzMBOM/Ia7OPgxYK8rzZzwiA065
RHZu7cuFvKV8d0Qe50BJxdG3HfxMaDv2qVoS84n8lm/r9AIzIcfu367FYrlQ
uFJolsdEFui/CuvefiYTxs8//RkXyoHPTz02LMLnK44LdnHFuO68tsR+GeLI
12W3o/MxvhWlFRp2zMf+swpvcMD8cFSkRNBzgobEaz/ntWMc8E14D83G5+U3
r/9XhHhh2L7oNunvZ3wu03UojNj/sqfPdZBQpa4ivmwwy+0g19IjzM/T82Ge
/t71zTQ88+SLzo7lQOCDApnLr3LgcvWm5vCj6SDalHcncW0O+PlSw5FbcmD5
lddD32VZsO9S+o1Yr2ywi6r2iizAfk9Jiyb7UjdEp1iSdR4iiqaKJar/b92g
/64PfnOZPtf55b/WLSYWTJh6uLrV7QQD3gsUpR8KY4KiIldd5C4WtD35NPQL
26XE1esfkPmSzT9SS/fS0KUvklKD+nWTbZyRGL7+fMmSPhO0wgePC14k83fH
tjjHonUNXhoSR9rjKNcLwq/6jxse2o+/t35GfWcotpcsf0ByHebbbBmufSdn
0PBGXprrfQYLasZ4hat2McF5yVHHAyc5wL3sOW/nRzbscI0pnrmRCfLcNyPL
UUf0dW/b8XsmE9ZFn3yVXZMJK/8pPJ1zLwva49KTxZD3tf5euvwX8nZD/6MX
fDORZzTObWnTYYN6R8OTxt0UpNh8ff0nNhu26uYu+OqWDdH1M+8OJjBB+8KF
Tq5MGnaEGnZVYb/fvPPB5R5Zl8/cM30OwdlovVIFkv9PF7q6ob84xLHtyT7B
ruW1XnNQZ8jlj0wJoV0sk59egvHxRk/Nywg/l3ioNuQkfu/dw7u1EWS9zyY6
7ArqDsePKem8+Hl3oUv8U4gztcIGRcW8iB9XV8hHIx/euIy5PjqQhqeKykNr
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
OcxSnYBLUZIqBMIHS/G3X/XoBMLL0Q/JQEJMoUha0VcGvKzUqu1/lAkdH07N
00D41iZLylSaZEPFLo71SRI5sPJC5bex7SlwPDE0p2UfAcuVzuzsfU/+c30b
pXaAtc47xIpNqjqNBJEj5OtSxKt9/aopL7jokDmv1nXcgwTnxduo2K5Wi0V4
seoO849NYjyx3e/SXniKAKNna5mVawlo8xjSMjZA+Ma4yenKRLz3JMZvHRsB
G67cYvT8ZsLsdjP1McR/NiZvuxfUMSEtO1LFeC8Bm77casfPT25yYcPtGLpr
WgP/T9nAc058Xr3KqLsD4VjytXX1R5HkvK87Wof84P1Va170oDgkxU2a49E7
Era1vy/Tx/XTS7SF3i9BvL4m/+mRUcQjPK7D2x4iu4xS5/KeIuHnnZA9oZmo
PfecaslA9pP9eS4jgaADB+XJotZLVNg4LylwakE2JFsxGoet6aA95N1jJkqF
wGim6I1tNBg61BP4ZmM+im/cK+aQf98fHPztrj1ebyEfw0Txx1d5/o04b0OU
2kmz0BUFoDax5YoHzj8fuJqWK4zzROrQdyqQsPSnqNt5JLUWt1xL4ibBdZ/Q
SZE1JDj1zjup5MyEpM9nfNIGqWAoskdHsocGxddXfmLYk2A0ubLMBvG9KlGc
I4TiuPHVik/CUPxxbsSDohVNQqmmUdQA4lGVngidW0kkLJ5fPBlYgfiTzcLO
EMUfP7WjDzpnk3DbrfYlvYQEK4GYS3qo/5/yj/A0hKDvub/uoS6Kq1ad+1b3
Gel5Mn1T5v9U/+4P7ru1SZ3H+rR5Tr7rf7r/7zj/93wU/9t50383fvXnOX/y
nusTcltY41LzMhWxFI3RW43fz2invg0+Fhf8WoP1bUNx6nJWnoyFXtb4uq5N
lQ8+Nj+fE4z9mA/N9FdY3pqjbcASLG4cxteb1ISKsbRq1fMYG8kDjl0fGG+d
6fDqHn/Slg8UYHskJxCkTcKr27zsh1NJ0BW74xq6h4B2XouysKskbL7gOzeG
+lFUIiJCk0pC6NriPB0rFGeOOMracjKh1EdN8H5JPli2dqbUydPA5O4Z7U7E
OxPj19l/SeTDjbbPr55H5IFu34U2Jc5MuKuSO2CH93tFEfd3x2ZBrfLlgal3
eeDuQfumYUSDE9abM0waCPjwsMxjiiTB9p7ke8yL3yvLevD8RbFB6gnMJwtW
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
JsL/JZ8tNi4l+0q3h/I/wPc/qeJQ1IN+MDQFDHHNZoB/1uHEbd8p+Gy1zdVp
Ib6f+QhPN8pxRnp2XTP6143HD65hQv1gqnDq174MCsbl0+fHIF8WL+yyvIf2
uzb4xL7SELw/YrvJcjYKLnc63jFeS8EHgSxnD28KZGSTfpL1/EKVBDfiD6X+
KVMieJrrm7wVvU7BoxHuwZkLeQXy3y9o50CHeWav2rps8JPcxfIxoAg4TQPk
xoWygTVktPkT4mfodqHzvK/JOZ4g4ygewa9Cxzu/u7v9bT9m4qE2SsF0vFNp
vIeO+wkLStH9y4Uj9XMIjeKbJX4Q+Vn+tPm7GMrDa/HOpvWR1+HDc6dPB2dl
wHfDtspk/L6z6mdsr0/hPFlUPh5mngenoo2jHK/kwxfdO9tn/cqERcFmD0f3
5QNbYMszyQr0sy/29Fh9y4MV+ScXyOP8D1TvZtojzQAhtbIzVqWFMGBUZxRv
zYAXx1g4VX+gXdhbuiq2qhCCsty8X6A/nvh9UcOrxiIQvj35ifUy4jpRBZbP
ZymoUihd7x5AwW3BTNmrayiwrn7s63jj8j/9igOChbQfMXOcPlEyRKhc8hAv
2Rd2cPeQGrEfLyf2+jiQOliJIha/kZoeK+WwRX3nX/565w/09y7l3vCNRzu/
bK1CiSjO3/1/mppNcT5rbXzJ/168GBx6M9bfRruzwNmhuGWIAofdAeeid1Fw
znetTtbSIpAwyl/oW5gOgrEds/m80+Gw0C6NVJZMOPDmg1xzSzY0clnbiaVm
Q8sAs+KSXSQPS680/AsDeJ9pVN5H/cHnLKZM+qGKdqkNk7pgZ5WVPUgd3Axz
F6/q5f89nqxy/KA2O9n3YeIwdgTvv7jfsnsNwSU8rpPv8byn9R52ghtmv1bu
f/wcxy/9EmNkcRSYGLiqnX2GONu7Cpjxvhsg8InUW30XNJlP+th59RcVKiJt
GlTZIUbHrZaKO+Fzz4UPmVri8cfr7g8KSX7evo/tpG5UYXRyYxz+/596R7bl
eN3kzyWZajwfFPXwLckfkVz2YH0s+mkReXcnPqAdGW/guvybGXH5l6oneTgf
R5rqJbPGKEg3S+CRZke/POB3YCTiSv01ed+t8Hr2vh5uXvRrdO6YeJB18YYD
oqKeSHk98g+S9c6lP4MOEH0/d5Y7P1kPdfkcxUz02jI5oO3t0nmmDwjNnad1
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
   "], {{0, 0}, {200,
    200}}, {0, 0.07107307300727382}],
  Frame->Automatic,
  FrameLabel->{
    FormBox["\"step 200\"", TraditionalForm], None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{3.766868784506173*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"dfa70b41-aadd-482c-b2fe-5c4eb24d590d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Binarization of Rules", "Section",
 CellChangeTimes->{{3.76686670687731*^9, 
  3.7668667100850973`*^9}},ExpressionUUID->"2d01c046-150b-4668-b037-\
4d14267070de"],

Cell[CellGroupData[{

Cell["K-3 Lists to Rule", "Subsection",
 CellChangeTimes->{{3.7668845163977757`*^9, 
  3.766884530951477*^9}},ExpressionUUID->"2a1c4260-c095-4022-ade6-\
f3979f0d7bb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"k3ListsToRule", "[", 
   RowBox[{"lists_", "?", "MatrixQ"}], "]"}], ":=", 
  RowBox[{"FromDigits", "[", 
   RowBox[{
    RowBox[{"Reverse", "[", 
     RowBox[{"Join", "@@", 
      RowBox[{"Transpose", "[", "lists", "]"}]}], "]"}], ",", "3"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7668843706793623`*^9, 3.7668844608225393`*^9}, {
  3.76688449663596*^9, 3.766884497458634*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"dd805918-4238-464f-bd71-b189c38746fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Game of Life", "Subsection",
 CellChangeTimes->{{3.766883745446528*^9, 
  3.766883750232012*^9}},ExpressionUUID->"93c5b32f-1b0e-4ee6-9aca-\
5b0dced93c9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerDigits", "[", 
  RowBox[{"224", ",", "2", ",", "18"}], "]"}]], "Input",
 CellChangeTimes->{{3.766866714641309*^9, 3.7668667465353928`*^9}, {
  3.766883729050411*^9, 3.766883738581115*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"ad9f144f-740e-4eb8-843f-a5f1503702b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.766866747050496*^9, 3.7668668238023357`*^9, {3.76688372990958*^9, 
   3.766883738946906*^9}},
 CellLabel->
  "Out[153]=",ExpressionUUID->"e1ffcc33-2c8c-4230-8422-6399589f7048"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", "\"\<GameOfLife\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.766870153285102*^9, 3.766870157686145*^9}, {
  3.7668703071207848`*^9, 3.766870335906623*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"281e66f5-1e81-4b21-827d-e10801479463"],

Cell[BoxData[
 GraphicsBox[{{{InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[5, 2]}, {0.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[5, 2]}, {2.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[5, 2]}, {4.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[5, 2]}, {6.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[5, 2]}, {7.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[5, 2]}, {9.625, 2.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[3, 2]}, {0.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[3, 2]}, {2.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[3, 2]}, {4.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[3, 2]}, {6.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[3, 2]}, {7.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[3, 2]}, {9.625, 1.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
      Center, Center}, {1.75, 1}]}}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 3}}], LineBox[{{1.75, 0}, {1.75, 3}}], 
     LineBox[{{3.5, 0}, {3.5, 3}}], LineBox[{{5.25, 0}, {5.25, 3}}], 
     LineBox[{{7., 0}, {7., 3}}], LineBox[{{8.75, 0}, {8.75, 3}}], 
     LineBox[{{10.5, 0}, {10.5, 3}}]}, {LineBox[{{0, 0}, {10.5, 0}}], 
     LineBox[{{0, 1}, {10.5, 1}}], LineBox[{{0, 2}, {10.5, 2}}], 
     LineBox[{{0, 3}, {10.5, 3}}]}}}]], "Output",
 CellChangeTimes->{
  3.7668701626788073`*^9, {3.7668703090722923`*^9, 3.766870336282248*^9}},
 CellLabel->"Out[31]=",ExpressionUUID->"16c01d6f-332a-483c-83dd-17c8931e9f0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CellularAutomaton", "[", 
  RowBox[{"{", 
   RowBox[{"224", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.766881126862907*^9, 3.766881134847452*^9}, {
  3.766881237017498*^9, 3.766881247492559*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"d52d6d5e-0232-49d8-9c2e-c874c69ff9da"],

Cell[BoxData[
 RowBox[{"CellularAutomaton", "[", 
  RowBox[{"{", 
   RowBox[{"224", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{{3.766881125652733*^9, 3.766881135949246*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"ae21d13e-e2eb-4153-a407-eae64022e40f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766871923351061*^9, 3.766871943177302*^9}, {
  3.766872063844727*^9, 3.766872065011755*^9}, {3.7668812547450027`*^9, 
  3.766881334436906*^9}, {3.766882175920095*^9, 3.7668821823882093`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"5ba1d23d-7a9f-4834-b609-0f359cb0525f"],

Cell[BoxData[
 GraphicsBox[{{{InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[5, 2]}, {0.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[5, 2]}, {2.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[5, 2]}, {4.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[5, 2]}, {6.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[5, 2]}, {7.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[5, 2]}, {9.625, 2.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[3, 2]}, {0.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[3, 2]}, {2.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[3, 2]}, {4.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[3, 2]}, {6.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[3, 2]}, {7.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[3, 2]}, {9.625, 1.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
      Center, Center}, {1.75, 1}]}}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 3}}], LineBox[{{1.75, 0}, {1.75, 3}}], 
     LineBox[{{3.5, 0}, {3.5, 3}}], LineBox[{{5.25, 0}, {5.25, 3}}], 
     LineBox[{{7., 0}, {7., 3}}], LineBox[{{8.75, 0}, {8.75, 3}}], 
     LineBox[{{10.5, 0}, {10.5, 3}}]}, {LineBox[{{0, 0}, {10.5, 0}}], 
     LineBox[{{0, 1}, {10.5, 1}}], LineBox[{{0, 2}, {10.5, 2}}], 
     LineBox[{{0, 3}, {10.5, 3}}]}}}]], "Output",
 CellChangeTimes->{{3.766871924565497*^9, 3.766871943600259*^9}, {
  3.7668720653700666`*^9, 3.766872077950912*^9}, {3.766881253272891*^9, 
  3.7668812560764236`*^9}, {3.7668821766740103`*^9, 3.766882182766081*^9}},
 CellLabel->"Out[90]=",ExpressionUUID->"198e1ba2-9fee-42be-a6da-8a60361fbd3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"{", 
    RowBox[{"224", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766881345627288*^9, 3.766881350467759*^9}, {
  3.766881456503993*^9, 
  3.7668814583071337`*^9}},ExpressionUUID->"da8636bd-185b-4699-bd49-\
b0c17bda069f"],

Cell[BoxData[
 GraphicsBox[{{InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{11.375, Rational[1, 2]}, {11.375, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{13.125, Rational[1, 2]}, {13.125, 0.5}], {
     Center, Center}, {1.75, 1}]}, InsetBox[
    TagBox[GridBox[{
       {"\<\"\[VerticalEllipsis]\"\>"},
       {
        StyleBox["2459",
         StripOnInput->False,
         LineColor->GrayLevel[0.5],
         FrontFaceColor->GrayLevel[0.5],
         BackFaceColor->GrayLevel[0.5],
         GraphicsColor->GrayLevel[0.5],
         FontColor->GrayLevel[0.5]]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Center}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{0.2}}}],
     "Column"], {7., -0.6363636363636364}], {InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {0.875, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {2.625, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {4.375, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {6.125, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {7.875, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {9.625, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {11.375, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {13.125, -1.7727272727272725}, {Center, Center}, {1.75, 1}]}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 1}}], LineBox[{{1.75, 0}, {1.75, 1}}], 
     LineBox[{{3.5, 0}, {3.5, 1}}], LineBox[{{5.25, 0}, {5.25, 1}}], 
     LineBox[{{7., 0}, {7., 1}}], LineBox[{{8.75, 0}, {8.75, 1}}], 
     LineBox[{{10.5, 0}, {10.5, 1}}], LineBox[{{12.25, 0}, {12.25, 1}}], 
     LineBox[{{14., 0}, {14., 1}}]}, {LineBox[{{0, 0}, {14., 0}}], 
     LineBox[{{0, 1}, {14., 1}}]}, 
    LineBox[{{0, -1.2727272727272727`}, {14., -1.2727272727272727`}}], {
     LineBox[{{0, -2.2727272727272725`}, {0, -1.2727272727272727`}}], 
     LineBox[{{1.75, -2.2727272727272725`}, {1.75, -1.2727272727272727`}}], 
     LineBox[{{3.5, -2.2727272727272725`}, {3.5, -1.2727272727272727`}}], 
     LineBox[{{5.25, -2.2727272727272725`}, {5.25, -1.2727272727272727`}}], 
     LineBox[{{7., -2.2727272727272725`}, {7., -1.2727272727272727`}}], 
     LineBox[{{8.75, -2.2727272727272725`}, {8.75, -1.2727272727272727`}}], 
     LineBox[{{10.5, -2.2727272727272725`}, {10.5, -1.2727272727272727`}}], 
     LineBox[{{12.25, -2.2727272727272725`}, {12.25, -1.2727272727272727`}}], 
     LineBox[{{14., -2.2727272727272725`}, {14., -1.2727272727272727`}}]}, 
    LineBox[{{0, -2.2727272727272725`}, {
      14., -2.2727272727272725`}}]}}]], "Output",
 CellChangeTimes->{{3.766881346958754*^9, 3.766881350893051*^9}},
 CellLabel->"Out[56]=",ExpressionUUID->"7d19f2ae-2823-46a4-a997-ad8d7ce552fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"3", "^", "7"}], "-", "1"}]], "Input",
 CellChangeTimes->{{3.7668820200959806`*^9, 3.766882058180356*^9}, {
  3.76688209455365*^9, 3.766882098660392*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"d5c13190-4df2-4ee1-9db5-e77ea58a1229"],

Cell[BoxData["2186"], "Output",
 CellChangeTimes->{3.766882028752233*^9, 3.7668820589529343`*^9, 
  3.7668820993051167`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"d5a3428f-1789-455f-8e44-0ab98bd59e0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766881633223151*^9, 3.766881633343659*^9}, {
  3.766881698444071*^9, 3.766881732612557*^9}, {3.766881976008823*^9, 
  3.7668819815951443`*^9}, {3.766882032624946*^9, 3.766882068384781*^9}, {
  3.7668821017858667`*^9, 3.766882153823762*^9}, {3.766882260712977*^9, 
  3.7668822645082684`*^9}, {3.7668823918020487`*^9, 3.766882408026803*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[91]:=",ExpressionUUID->"da5ddafd-1090-4b58-88e8-5e00ae0e5f2f"],

Cell[BoxData[
 GraphicsBox[{{{InsetBox[
      GraphicsBox[{
        {GrayLevel[0], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[5, 2]}, {0.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[1, 18], 0.05555555555555555]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[5, 2]}, {2.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[1, 9], 0.1111111111111111]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[5, 2]}, {4.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[1, 6], 0.16666666666666666`]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[5, 2]}, {6.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[2, 9], 0.2222222222222222]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[5, 2]}, {7.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[5, 18], 0.2777777777777778]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[5, 2]}, {9.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[1, 3], 0.3333333333333333]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[5, 2]}, {11.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[7, 18], 0.3888888888888889]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[5, 2]}, {13.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[4, 9], 0.4444444444444444]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[5, 2]}, {14.875, 2.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[1, 2], 0.5]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[3, 2]}, {0.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[5, 9], 0.5555555555555556]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[3, 2]}, {2.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[11, 18], 0.6111111111111112]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[3, 2]}, {4.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[2, 3], 0.6666666666666666]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[3, 2]}, {6.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[13, 18], 0.7222222222222222]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[3, 2]}, {7.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[7, 9], 0.7777777777777778]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[3, 2]}, {9.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[5, 6], 0.8333333333333334]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[3, 2]}, {11.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[8, 9], 0.8888888888888888]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[3, 2]}, {13.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{
        {GrayLevel[
          NCache[
           Rational[17, 18], 0.9444444444444444]], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[3, 2]}, {14.875, 1.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{
        {GrayLevel[1], EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 0}, {
          0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}]}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
      Center, Center}, {1.75, 1}], 
     TagBox[
      InsetBox["", NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{11.375, Rational[1, 2]}, {11.375, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{13.125, Rational[1, 2]}, {13.125, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"], 
     TagBox[
      InsetBox["", NCache[{14.875, Rational[1, 2]}, {14.875, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"]}}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 3}}], LineBox[{{1.75, 0}, {1.75, 3}}], 
     LineBox[{{3.5, 0}, {3.5, 3}}], LineBox[{{5.25, 0}, {5.25, 3}}], 
     LineBox[{{7., 0}, {7., 3}}], LineBox[{{8.75, 0}, {8.75, 3}}], 
     LineBox[{{10.5, 0}, {10.5, 3}}], LineBox[{{12.25, 0}, {12.25, 3}}], 
     LineBox[{{14., 0}, {14., 3}}], LineBox[{{15.75, 0}, {15.75, 3}}]}, {
     LineBox[{{0, 0}, {15.75, 0}}], LineBox[{{0, 1}, {15.75, 1}}], 
     LineBox[{{0, 2}, {15.75, 2}}], 
     LineBox[{{0, 3}, {15.75, 3}}]}}}]], "Output",
 CellChangeTimes->{
  3.76688163383853*^9, {3.766881699009667*^9, 3.7668817333810177`*^9}, 
   3.7668819877500772`*^9, {3.7668820437074213`*^9, 3.7668820689318438`*^9}, {
   3.766882102311092*^9, 3.766882154456089*^9}, 3.766882265265568*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"a933f5e1-0e6a-4470-aae1-9d91a30b9ac1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"{", 
    RowBox[{"529254", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "3", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "3", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766882424801331*^9, 3.766882465356213*^9}, 
   3.7668828167019*^9, 3.766882851717947*^9, {3.7668828915636473`*^9, 
   3.766882933202009*^9}, 3.766882991698524*^9, {3.766883694593276*^9, 
   3.766883694702332*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"86e55798-e6c0-4e50-99d2-d7e46204387f"],

Cell[BoxData[
 GraphicsBox[{{{InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-2, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[5, 2]}, {0.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[5, 2]}, {2.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[5, 2]}, {4.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[5, 2]}, {6.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[5, 2]}, {7.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[5, 2]}, {9.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[5, 2]}, {11.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[5, 2]}, {13.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-2, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-2, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[5, 2]}, {14.875, 2.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-2, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[3, 2]}, {0.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[3, 2]}, {2.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[3, 2]}, {4.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[3, 2]}, {6.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[3, 2]}, {7.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[3, 2]}, {9.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[3, 2]}, {11.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[3, 2]}, {13.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-2, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-2, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[3, 2]}, {14.875, 1.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-2, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[1, 2]}, {11.375, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-2, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[1, 2]}, {13.125, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-2, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-2, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
          PolygonBox[{{-3, 1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 1}, {-1, 
           0}, {-2, 0}, {-2, -1}, {-1, -1}, {-1, 0}, {0, 0}, {0, 1}, {-1, 
           1}, {-1, 2}, {-2, 2}, {-2, 1}}], 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[1, 2]}, {14.875, 0.5}], {
      Center, Center}, {1.75, 1}]}}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 3}}], LineBox[{{1.75, 0}, {1.75, 3}}], 
     LineBox[{{3.5, 0}, {3.5, 3}}], LineBox[{{5.25, 0}, {5.25, 3}}], 
     LineBox[{{7., 0}, {7., 3}}], LineBox[{{8.75, 0}, {8.75, 3}}], 
     LineBox[{{10.5, 0}, {10.5, 3}}], LineBox[{{12.25, 0}, {12.25, 3}}], 
     LineBox[{{14., 0}, {14., 3}}], LineBox[{{15.75, 0}, {15.75, 3}}]}, {
     LineBox[{{0, 0}, {15.75, 0}}], LineBox[{{0, 1}, {15.75, 1}}], 
     LineBox[{{0, 2}, {15.75, 2}}], 
     LineBox[{{0, 3}, {15.75, 3}}]}}}]], "Output",
 CellChangeTimes->{{3.7668824377730513`*^9, 3.766882466025008*^9}, 
   3.766882817909758*^9, 3.766882852915847*^9, {3.766882892320547*^9, 
   3.766882933931403*^9}, 3.766882992285515*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"33faf517-4452-4040-918d-78ce8428a554"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "2", ",", "2", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766883562764048*^9, 3.7668835672669067`*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"ba0ef13a-1dcf-4b55-8ba1-91b5b81ed04c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "2", ",", "2", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.76688356765554*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"1bc9d233-c744-4aa5-a0b0-6f34a86e9c81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "2", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7668829567336473`*^9, 3.766882959401677*^9}, 
   3.766883573128009*^9},
 CellLabel->
  "In[145]:=",ExpressionUUID->"134ebe7e-432e-42c6-8d65-310e65a13127"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.76688357347254*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"a7aa0035-f597-4bce-8dc6-d08666c643bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "@@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7668829675846024`*^9, 3.766882975982542*^9}, 
   3.7668835773657503`*^9},
 CellLabel->
  "In[146]:=",ExpressionUUID->"fd735a67-b4be-4439-989f-6688740b7168"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "2", ",", "2", ",", "1", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.766882976270432*^9, 3.7668835777220707`*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"5151cbae-d052-4a81-8314-468f9e5e9cab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"{", 
   RowBox[{
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
    ",", "2", ",", "2", ",", "1", ",", "2", ",", "0", ",", "0", ",", "0", ",",
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
    "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.76688255593671*^9, 3.766882559619186*^9}, {
   3.766882602171999*^9, 3.766882609368071*^9}, {3.7668827123226967`*^9, 
   3.766882713022481*^9}, {3.766882774342801*^9, 3.766882800519354*^9}, {
   3.766882832508659*^9, 3.766882840277664*^9}, {3.7668828754113703`*^9, 
   3.7668828789853973`*^9}, {3.766882950693367*^9, 3.7668829511248837`*^9}, 
   3.766882981806588*^9, 3.7668835833765078`*^9},
 CellLabel->
  "In[147]:=",ExpressionUUID->"a426f753-b630-478a-abdb-fbdb6573f85e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "2", ",", "1", ",", "2", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.766882714190278*^9, 3.7668828023585997`*^9, 
  3.766882840871244*^9, 3.766882879509018*^9, 3.7668829823754377`*^9, 
  3.766883583628652*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"a08bb089-5215-484a-8533-b66b02a3c98a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
     ",", "2", ",", "1", ",", "2", ",", "2", ",", "1", ",", "0", ",", "0", 
     ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.766882530698134*^9, 3.766882545584076*^9}, {
   3.766882808612605*^9, 3.7668828450442543`*^9}, 3.766882883337947*^9, 
   3.766882985811407*^9, 3.76688358666582*^9},
 CellLabel->
  "In[148]:=",ExpressionUUID->"df1936e9-1b44-433b-9ded-8b340422781b"],

Cell[BoxData["468018"], "Output",
 CellChangeTimes->{{3.76688254023519*^9, 3.76688254299494*^9}, 
   3.7668828093707438`*^9, 3.766882845619376*^9, 3.766882883705078*^9, 
   3.766882986266786*^9, 3.766883587142522*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"66e43711-c1af-4b18-8462-2915f992e2f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"468018", ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "3", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "1", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "3", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", "0"}], "}"}],
     ",", "10"}], "]"}], "/", "2"}]], "Input",
 CellChangeTimes->{{3.766883122486244*^9, 3.766883159435667*^9}, 
   3.766883590135441*^9},
 CellLabel->
  "In[149]:=",ExpressionUUID->"2f46e267-3cb5-441c-996d-970468f04773"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       FractionBox["1", "2"]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.766883117819769*^9, 3.766883133521138*^9}, 
   3.7668835906598263`*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"94c33d3f-28c2-4f9b-ac76-74b09c8030f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrix", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"2", ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7668833159984627`*^9, 3.766883345760357*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"56648277-2514-4208-8666-79e0404a1c6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "2", ",", "0", ",", "0", ",", "2", ",", "0", ",", "2",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "2", ",", "0", ",", "2", ",", "0", ",", "0", ",", "2", ",", "2",
      ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "1", ",", "1",
      ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "0", ",", "1", ",", "0", ",", "2", ",", "2", ",", "2", ",", "0",
      ",", "2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "0", ",", "0", ",", "1", ",", "0", ",", "2", ",", "2", ",", "0",
      ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "0", ",", "0", ",", "2", ",", "1", ",", "2",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "1", ",", "0", ",", "1", ",", "2", ",", "2", ",", "1", ",", "2",
      ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "0", ",", "0", ",", "2", ",", "1", ",", "0", ",", "1",
      ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "0", ",", "1", ",", "2",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "2", ",", "2", ",", "0", ",", "0", ",", "1", ",", "2", ",", "1",
      ",", "2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7668833187522717`*^9, 3.766883346143104*^9}, 
   3.7668833890321503`*^9, 3.766883607806213*^9, 3.766884175803069*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"b78f065e-4ae4-4084-b539-13fd5f68560c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"CellularAutomaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"468018", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "3", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "1", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "3", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"matrix", ",", "0"}], "}"}], ",", "10"}], "]"}], "[", 
     RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7668830117023363`*^9, 3.766883107752615*^9}, {
   3.766883142471558*^9, 3.7668831643878403`*^9}, {3.766883206304768*^9, 
   3.7668833217635727`*^9}, 3.7668835954639463`*^9},
 CellLabel->
  "In[150]:=",ExpressionUUID->"c67b3040-65d3-4d51-ba84-f1ff6c0ece18"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 10, 1}}, Typeset`size$$ = {
    360., {177., 182.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$30477$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$30477$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[
        Part[
         CellularAutomaton[{
          468018, {3, {{0, 3, 0}, {3, 1, 3}, {0, 3, 0}}}, {1, 
           1}}, {$CellContext`matrix, 0}, 10], $CellContext`i$$]], 
      "Specifications" :> {{$CellContext`i$$, 1, 10, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {222., 228.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.766883032399881*^9, 3.766883045520915*^9}, {
   3.7668830871083527`*^9, 3.7668831080200853`*^9}, 3.766883138839293*^9, 
   3.766883170893906*^9, {3.766883207340551*^9, 3.7668832174376287`*^9}, {
   3.766883254915826*^9, 3.7668832591116543`*^9}, {3.766883299942868*^9, 
   3.7668833222034473`*^9}, 3.7668835970184517`*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"9e2e6114-c19a-452b-b307-e8051aa5d252"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"{", 
    RowBox[{"468018", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"3", ",", "3", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3", ",", "3"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766883788826939*^9, 3.76688379380326*^9}, 
   3.766884031042741*^9, 3.7668841114483747`*^9},
 CellLabel->
  "In[166]:=",ExpressionUUID->"7775f498-de10-4178-b817-ebb13f75a3c7"],

Cell[BoxData[
 GraphicsBox[{{{InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[9, 2]}, {0.875, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 16], 0.0625]]], 
          {GrayLevel[
            NCache[
             Rational[1, 16], 0.0625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[9, 2]}, {2.625, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 16], 0.1875]]], 
          {GrayLevel[
            NCache[
             Rational[3, 16], 0.1875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[9, 2]}, {4.375, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 16], 0.3125]]], 
          {GrayLevel[
            NCache[
             Rational[5, 16], 0.3125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[9, 2]}, {6.125, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[9, 2]}, {7.875, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[9, 2]}, {9.625, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[9, 2]}, {11.375, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[11, 16], 0.6875]]], 
          {GrayLevel[
            NCache[
             Rational[11, 16], 0.6875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[9, 2]}, {13.125, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[13, 16], 0.8125]]], 
          {GrayLevel[
            NCache[
             Rational[13, 16], 0.8125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[9, 2]}, {14.875, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[15, 16], 0.9375]]], 
          {GrayLevel[
            NCache[
             Rational[15, 16], 0.9375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{16.625, Rational[9, 2]}, {16.625, 4.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{18.375, Rational[9, 2]}, {18.375, 4.5}], {
      Center, Center}, {1.75, 1}]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[7, 2]}, {0.875, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[7, 2]}, {2.625, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 16], 0.1875]]], 
          {GrayLevel[
            NCache[
             Rational[3, 16], 0.1875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[7, 2]}, {4.375, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 16], 0.3125]]], 
          {GrayLevel[
            NCache[
             Rational[5, 16], 0.3125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[7, 2]}, {6.125, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 16], 0.4375]]], 
          {GrayLevel[
            NCache[
             Rational[7, 16], 0.4375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[7, 2]}, {7.875, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[7, 2]}, {9.625, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[7, 2]}, {11.375, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[7, 2]}, {13.125, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[13, 16], 0.8125]]], 
          {GrayLevel[
            NCache[
             Rational[13, 16], 0.8125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[7, 2]}, {14.875, 3.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[15, 16], 0.9375]]], 
          {GrayLevel[
            NCache[
             Rational[15, 16], 0.9375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{16.625, Rational[7, 2]}, {16.625, 3.5}], {
      Center, Center}, {1.75, 1}], 
     TagBox[
      InsetBox["", NCache[{18.375, Rational[7, 2]}, {18.375, 3.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[0]], 
          {GrayLevel[0], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[5, 2]}, {0.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[5, 2]}, {2.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[5, 2]}, {4.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 16], 0.3125]]], 
          {GrayLevel[
            NCache[
             Rational[5, 16], 0.3125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[5, 2]}, {6.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 16], 0.4375]]], 
          {GrayLevel[
            NCache[
             Rational[7, 16], 0.4375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[5, 2]}, {7.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[9, 16], 0.5625]]], 
          {GrayLevel[
            NCache[
             Rational[9, 16], 0.5625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[5, 2]}, {9.625, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[5, 8], 0.625]]], 
          {GrayLevel[
            NCache[
             Rational[5, 8], 0.625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[5, 2]}, {11.375, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[5, 2]}, {13.125, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[5, 2]}, {14.875, 2.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[15, 16], 0.9375]]], 
          {GrayLevel[
            NCache[
             Rational[15, 16], 0.9375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{16.625, Rational[5, 2]}, {16.625, 2.5}], {
      Center, Center}, {1.75, 1}], 
     TagBox[
      InsetBox["", NCache[{18.375, Rational[5, 2]}, {18.375, 2.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 16], 0.0625]]], 
          {GrayLevel[
            NCache[
             Rational[1, 16], 0.0625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[3, 2]}, {0.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 8], 0.125]]], 
          {GrayLevel[
            NCache[
             Rational[1, 8], 0.125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[3, 2]}, {2.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[3, 2]}, {4.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[3, 2]}, {6.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 16], 0.4375]]], 
          {GrayLevel[
            NCache[
             Rational[7, 16], 0.4375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[3, 2]}, {7.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[9, 16], 0.5625]]], 
          {GrayLevel[
            NCache[
             Rational[9, 16], 0.5625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[3, 2]}, {9.625, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[11, 16], 0.6875]]], 
          {GrayLevel[
            NCache[
             Rational[11, 16], 0.6875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[3, 2]}, {11.375, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 4], 0.75]]], 
          {GrayLevel[
            NCache[
             Rational[3, 4], 0.75]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[3, 2]}, {13.125, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[3, 2]}, {14.875, 1.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{16.625, Rational[3, 2]}, {16.625, 1.5}], {
      Center, Center}, {1.75, 1}], 
     TagBox[
      InsetBox["", NCache[{18.375, Rational[3, 2]}, {18.375, 1.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"]}, {InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 16], 0.0625]]], 
          {GrayLevel[
            NCache[
             Rational[1, 16], 0.0625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 16], 0.1875]]], 
          {GrayLevel[
            NCache[
             Rational[3, 16], 0.1875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 4], 0.25]]], 
          {GrayLevel[
            NCache[
             Rational[1, 4], 0.25]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[3, 8], 0.375]]], 
          {GrayLevel[
            NCache[
             Rational[3, 8], 0.375]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[1, 2], 0.5]]], 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[9, 16], 0.5625]]], 
          {GrayLevel[
            NCache[
             Rational[9, 16], 0.5625]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[11, 16], 0.6875]]], 
          {GrayLevel[
            NCache[
             Rational[11, 16], 0.6875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{11.375, Rational[1, 2]}, {11.375, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[13, 16], 0.8125]]], 
          {GrayLevel[
            NCache[
             Rational[13, 16], 0.8125]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[0], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{13.125, Rational[1, 2]}, {13.125, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[
           NCache[
            Rational[7, 8], 0.875]]], 
          {GrayLevel[
            NCache[
             Rational[7, 8], 0.875]], RectangleBox[{-3, 1}], 
           RectangleBox[{-2, 1}], RectangleBox[{-1, 1}], 
           RectangleBox[{-3, 0}], RectangleBox[{-1, 0}], 
           RectangleBox[{-3, -1}], RectangleBox[{-2, -1}], 
           RectangleBox[{-1, -1}]}, 
          {GrayLevel[1], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{14.875, Rational[1, 2]}, {14.875, 0.5}], {
      Center, Center}, {1.75, 1}], InsetBox[
      GraphicsBox[{{
         {EdgeForm[GrayLevel[1]], 
          {GrayLevel[1], RectangleBox[{-3, 1}], RectangleBox[{-2, 1}], 
           RectangleBox[{-1, 1}], RectangleBox[{-3, 0}], 
           RectangleBox[{-1, 0}], RectangleBox[{-3, -1}], 
           RectangleBox[{-2, -1}], RectangleBox[{-1, -1}]}, 
          {GrayLevel[
            NCache[
             Rational[1, 2], 0.5]], RectangleBox[{-2, 0}]}}, 
         {Opacity[0], EdgeForm[GrayLevel[
           NCache[-1 + GoldenRatio, 0.6180339887498949]]], {
           PolygonBox[{{-3, 0}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {0, 
            0}, {0, 1}, {0, 2}, {-1, 2}, {-2, 2}, {-3, 2}, {-3, 1}}], 
           PolygonBox[{{-2, 0}, {-2, 1}, {-1, 1}, {-1, 0}}]}, 
          PolygonBox[{{-2, 1}, {-2, 0}, {-1, 0}, {-1, 1}}]}}, 
        {Arrowheads[{{Automatic, Automatic, 
            GraphicsBox[
             LineBox[
              NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                 Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
                0}, {-0.8660254037844386, -0.5}}]]]}}], 
         ArrowBox[
          NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 
           0.5}, {1.5, 0.5}}]]}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{2, 0}]}}},
       PlotRange->NCache[{{
           Rational[-7, 2], 
           Rational[7, 2]}, {
           Rational[-3, 2], 
           Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
      NCache[{16.625, Rational[1, 2]}, {16.625, 0.5}], {
      Center, Center}, {1.75, 1}], 
     TagBox[
      InsetBox["", NCache[{18.375, Rational[1, 2]}, {18.375, 0.5}], {
       Center, Center}, {1.75, 1}],
      "InsetString"]}}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 5}}], LineBox[{{1.75, 0}, {1.75, 5}}], 
     LineBox[{{3.5, 0}, {3.5, 5}}], LineBox[{{5.25, 0}, {5.25, 5}}], 
     LineBox[{{7., 0}, {7., 5}}], LineBox[{{8.75, 0}, {8.75, 5}}], 
     LineBox[{{10.5, 0}, {10.5, 5}}], LineBox[{{12.25, 0}, {12.25, 5}}], 
     LineBox[{{14., 0}, {14., 5}}], LineBox[{{15.75, 0}, {15.75, 5}}], 
     LineBox[{{17.5, 0}, {17.5, 5}}], LineBox[{{19.25, 0}, {19.25, 5}}]}, {
     LineBox[{{0, 0}, {19.25, 0}}], LineBox[{{0, 1}, {19.25, 1}}], 
     LineBox[{{0, 2}, {19.25, 2}}], LineBox[{{0, 3}, {19.25, 3}}], 
     LineBox[{{0, 4}, {19.25, 4}}], 
     LineBox[{{0, 5}, {19.25, 5}}]}}}]], "Output",
 CellChangeTimes->{3.76688379428703*^9, 3.766884031636806*^9, 
  3.766884112201823*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"b88fdb8b-165e-4f23-a9d7-4b9ece1be41c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"k3ListsToRule", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "2", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.766884470131816*^9, 3.7668844708828287`*^9}},
 CellLabel->
  "In[175]:=",ExpressionUUID->"54d7c62a-1aa4-48e4-a4c0-24f0907cc2bb"],

Cell[BoxData["468018"], "Output",
 CellChangeTimes->{{3.7668844712954397`*^9, 3.766884508195966*^9}},
 CellLabel->
  "Out[175]=",ExpressionUUID->"99a74d25-e8dd-461c-8e50-95146a10f0c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"CellularAutomaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"468018", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"3", ",", "3", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "1", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "3", ",", "3"}], "}"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"matrix", ",", "0"}], "}"}], ",", "10"}], "]"}], "[", 
     RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766884025739766*^9, 3.7668840277247133`*^9}, {
  3.766884102030447*^9, 3.766884102935677*^9}, {3.7668841396773167`*^9, 
  3.766884166526382*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"5ffc3c08-33aa-4809-b336-de0d5ff1527e"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 10, 1}}, Typeset`size$$ = {
    360., {177., 182.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$32748$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$32748$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[
        Part[
         CellularAutomaton[{
          468018, {3, {{3, 3, 3}, {3, 1, 3}, {3, 3, 3}}}, {1, 
           1}}, {$CellContext`matrix, 0}, 10], $CellContext`i$$]], 
      "Specifications" :> {{$CellContext`i$$, 1, 10, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {222., 228.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.766884028472288*^9, 3.7668841034388113`*^9, {3.766884141211989*^9, 
   3.7668841799227333`*^9}},
 CellLabel->
  "Out[170]=",ExpressionUUID->"b2da6962-021b-45d7-9c10-5def37242575"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766884580802394*^9, 3.76688459629111*^9}, {
  3.766911715674711*^9, 3.766911718638125*^9}},
 CellLabel->
  "In[179]:=",ExpressionUUID->"25021a48-1b8c-4406-95db-4f51f7369eb0"],

Cell[BoxData[
 GraphicsBox[{{InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{0.875, Rational[1, 2]}, {0.875, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{2.625, Rational[1, 2]}, {2.625, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{4.375, Rational[1, 2]}, {4.375, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{6.125, Rational[1, 2]}, {6.125, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{7.875, Rational[1, 2]}, {7.875, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{9.625, Rational[1, 2]}, {9.625, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{11.375, Rational[1, 2]}, {11.375, 0.5}], {
     Center, Center}, {1.75, 1}], InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 1}]}, 
         {GrayLevel[0], RectangleBox[{-2, 1}]}, 
         {GrayLevel[0], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, 0}]}, 
         {GrayLevel[0], RectangleBox[{-2, 0}]}, 
         {GrayLevel[0], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[0], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 2.5}}]], 
     NCache[{13.125, Rational[1, 2]}, {13.125, 0.5}], {
     Center, Center}, {1.75, 1}]}, InsetBox[
    TagBox[GridBox[{
       {"\<\"\[VerticalEllipsis]\"\>"},
       {
        StyleBox["2459",
         StripOnInput->False,
         LineColor->GrayLevel[0.5],
         FrontFaceColor->GrayLevel[0.5],
         BackFaceColor->GrayLevel[0.5],
         GraphicsColor->GrayLevel[0.5],
         FontColor->GrayLevel[0.5]]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Center}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{0.2}}}],
     "Column"], {7., -0.6363636363636364}], {InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {0.875, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[0], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {2.625, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {4.375, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {6.125, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {7.875, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[0], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {9.625, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[
           NCache[
            Rational[1, 2], 0.5]], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {11.375, -1.7727272727272725}, {Center, Center}, {1.75, 1}], 
    InsetBox[
     GraphicsBox[{{
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 1}]}, 
         {GrayLevel[1], RectangleBox[{-2, 1}]}, 
         {GrayLevel[1], RectangleBox[{-1, 1}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, 0}]}, 
         {GrayLevel[1], RectangleBox[{-2, 0}]}, 
         {GrayLevel[1], RectangleBox[{-1, 0}]}}, 
        {EdgeForm[GrayLevel[
          NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
         {GrayLevel[1], RectangleBox[{-3, -1}]}, 
         {GrayLevel[1], RectangleBox[{-2, -1}]}, 
         {GrayLevel[1], RectangleBox[{-1, -1}]}}}, 
       {Arrowheads[{{Automatic, Automatic, 
           GraphicsBox[
            LineBox[
             NCache[{{Rational[-1, 2] 3^Rational[1, 2], 
                Rational[1, 2]}, {0, 0}, {Rational[-1, 2] 3^Rational[1, 2], 
                Rational[-1, 2]}}, {{-0.8660254037844386, 0.5}, {0, 
               0}, {-0.8660254037844386, -0.5}}]]]}}], 
        ArrowBox[
         NCache[{{0.5, Rational[1, 2]}, {1.5, Rational[1, 2]}}, {{0.5, 0.5}, {
          1.5, 0.5}}]]}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[{2, 0}]}}},
      PlotRange->NCache[{{
          Rational[-7, 2], 
          Rational[7, 2]}, {
          Rational[-3, 2], 
          Rational[5, 2]}}, {{-3.5, 3.5}, {-1.5, 
        2.5}}]], {13.125, -1.7727272727272725}, {Center, Center}, {1.75, 1}]}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 1}}], LineBox[{{1.75, 0}, {1.75, 1}}], 
     LineBox[{{3.5, 0}, {3.5, 1}}], LineBox[{{5.25, 0}, {5.25, 1}}], 
     LineBox[{{7., 0}, {7., 1}}], LineBox[{{8.75, 0}, {8.75, 1}}], 
     LineBox[{{10.5, 0}, {10.5, 1}}], LineBox[{{12.25, 0}, {12.25, 1}}], 
     LineBox[{{14., 0}, {14., 1}}]}, {LineBox[{{0, 0}, {14., 0}}], 
     LineBox[{{0, 1}, {14., 1}}]}, 
    LineBox[{{0, -1.2727272727272727`}, {14., -1.2727272727272727`}}], {
     LineBox[{{0, -2.2727272727272725`}, {0, -1.2727272727272727`}}], 
     LineBox[{{1.75, -2.2727272727272725`}, {1.75, -1.2727272727272727`}}], 
     LineBox[{{3.5, -2.2727272727272725`}, {3.5, -1.2727272727272727`}}], 
     LineBox[{{5.25, -2.2727272727272725`}, {5.25, -1.2727272727272727`}}], 
     LineBox[{{7., -2.2727272727272725`}, {7., -1.2727272727272727`}}], 
     LineBox[{{8.75, -2.2727272727272725`}, {8.75, -1.2727272727272727`}}], 
     LineBox[{{10.5, -2.2727272727272725`}, {10.5, -1.2727272727272727`}}], 
     LineBox[{{12.25, -2.2727272727272725`}, {12.25, -1.2727272727272727`}}], 
     LineBox[{{14., -2.2727272727272725`}, {14., -1.2727272727272727`}}]}, 
    LineBox[{{0, -2.2727272727272725`}, {
      14., -2.2727272727272725`}}]}}]], "Output",
 CellChangeTimes->{{3.7668845821711807`*^9, 3.7668845972084637`*^9}, {
  3.766911716134574*^9, 3.7669117191136627`*^9}},
 CellLabel->
  "Out[179]=",ExpressionUUID->"242fb30b-10ac-439b-bb50-7116e9e1a460"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{4, Automatic}, {Automatic, 4}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (December 24, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 157, 3, 98, "Title",ExpressionUUID->"488e35cb-e272-4d01-916b-22fff50c483e"],
Cell[CellGroupData[{
Cell[762, 29, 152, 3, 67, "Section",ExpressionUUID->"6665e2c0-9d70-4433-b747-a79b1f7719e1"],
Cell[CellGroupData[{
Cell[939, 36, 155, 3, 54, "Subsection",ExpressionUUID->"672478d3-9b11-4af3-a9bb-59cbca6d4685"],
Cell[1097, 41, 769, 20, 30, "Input",ExpressionUUID->"91a4720f-2c3b-4210-83a3-16351e965970"],
Cell[1869, 63, 343, 8, 30, "Input",ExpressionUUID->"67f2244c-b8fd-4458-9383-203c8ac3d95a"],
Cell[CellGroupData[{
Cell[2237, 75, 814, 19, 30, "Input",ExpressionUUID->"a5191f3d-9dec-4f81-9fd8-797d113b34f8"],
Cell[3054, 96, 3442, 50, 306, "Output",ExpressionUUID->"fc79ac15-9979-4867-a919-3c91638e6d84"]
}, Open  ]],
Cell[6511, 149, 152, 3, 30, InheritFromParent,ExpressionUUID->"ea00dcb2-f753-49e9-9ebe-ab0a31f8f176"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6700, 157, 125, 3, 54, "Subsection",ExpressionUUID->"29c522f9-1e5f-4971-87e4-42d5592ba107"],
Cell[CellGroupData[{
Cell[6850, 164, 1002, 27, 30, "Input",ExpressionUUID->"d6d7607f-2a0f-4ac9-a2c1-ab6aa513b75c"],
Cell[7855, 193, 370444, 6080, 395, "Output",ExpressionUUID->"dfa70b41-aadd-482c-b2fe-5c4eb24d590d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[378360, 6280, 167, 3, 67, "Section",ExpressionUUID->"2d01c046-150b-4668-b037-4d14267070de"],
Cell[CellGroupData[{
Cell[378552, 6287, 167, 3, 54, "Subsection",ExpressionUUID->"2a1c4260-c095-4022-ade6-f3979f0d7bb1"],
Cell[378722, 6292, 501, 13, 30, "Input",ExpressionUUID->"dd805918-4238-464f-bd71-b189c38746fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379260, 6310, 160, 3, 54, "Subsection",ExpressionUUID->"93c5b32f-1b0e-4ee6-9aca-5b0dced93c9d"],
Cell[CellGroupData[{
Cell[379445, 6317, 302, 6, 30, "Input",ExpressionUUID->"ad9f144f-740e-4eb8-843f-a5f1503702b9"],
Cell[379750, 6325, 445, 10, 34, "Output",ExpressionUUID->"e1ffcc33-2c8c-4230-8422-6399589f7048"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380232, 6340, 321, 6, 30, "Input",ExpressionUUID->"281e66f5-1e81-4b21-827d-e10801479463"],
Cell[380556, 6348, 31572, 675, 130, "Output",ExpressionUUID->"16c01d6f-332a-483c-83dd-17c8931e9f0f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[412165, 7028, 697, 18, 30, "Input",ExpressionUUID->"d52d6d5e-0232-49d8-9c2e-c874c69ff9da"],
Cell[412865, 7048, 649, 17, 34, "Output",ExpressionUUID->"ae21d13e-e2eb-4153-a407-eae64022e40f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[413551, 7070, 843, 20, 30, "Input",ExpressionUUID->"5ba1d23d-7a9f-4834-b609-0f359cb0525f"],
Cell[414397, 7092, 31693, 676, 130, "Output",ExpressionUUID->"198e1ba2-9fee-42be-a6da-8a60361fbd3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[446127, 7773, 396, 10, 30, "Input",ExpressionUUID->"da8636bd-185b-4699-bd49-b0c17bda069f"],
Cell[446526, 7785, 28234, 637, 112, "Output",ExpressionUUID->"7d19f2ae-2823-46a4-a997-ad8d7ce552fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[474797, 8427, 267, 5, 30, "Input",ExpressionUUID->"d5c13190-4df2-4ee1-9db5-e77ea58a1229"],
Cell[475067, 8434, 203, 3, 34, "Output",ExpressionUUID->"d5a3428f-1789-455f-8e44-0ab98bd59e0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[475307, 8442, 741, 15, 30, "Input",ExpressionUUID->"da5ddafd-1090-4b58-88e8-5e00ae0e5f2f"],
Cell[476051, 8459, 25149, 556, 97, "Output",ExpressionUUID->"a933f5e1-0e6a-4470-aae1-9d91a30b9ac1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[501237, 9020, 874, 22, 30, "Input",ExpressionUUID->"86e55798-e6c0-4e50-99d2-d7e46204387f"],
Cell[502114, 9044, 44084, 975, 97, "Output",ExpressionUUID->"33faf517-4452-4040-918d-78ce8428a554"]
}, Open  ]],
Cell[CellGroupData[{
Cell[546235, 10024, 631, 17, 30, "Input",ExpressionUUID->"ba0ef13a-1dcf-4b55-8ba1-91b5b81ed04c"],
Cell[546869, 10043, 597, 17, 34, "Output",ExpressionUUID->"1bc9d233-c744-4aa5-a0b0-6f34a86e9c81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[547503, 10065, 693, 19, 30, InheritFromParent,ExpressionUUID->"134ebe7e-432e-42c6-8d65-310e65a13127"],
Cell[548199, 10086, 798, 23, 34, "Output",ExpressionUUID->"a7aa0035-f597-4bce-8dc6-d08666c643bd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[549034, 10114, 898, 25, 30, InheritFromParent,ExpressionUUID->"fd735a67-b4be-4439-989f-6688740b7168"],
Cell[549935, 10141, 487, 9, 34, "Output",ExpressionUUID->"5151cbae-d052-4a81-8314-468f9e5e9cab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550459, 10155, 874, 15, 30, "Input",ExpressionUUID->"a426f753-b630-478a-abdb-fbdb6573f85e"],
Cell[551336, 10172, 583, 11, 34, "Output",ExpressionUUID->"a08bb089-5215-484a-8533-b66b02a3c98a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551956, 10188, 681, 14, 30, "Input",ExpressionUUID->"df1936e9-1b44-433b-9ded-8b340422781b"],
Cell[552640, 10204, 300, 5, 34, "Output",ExpressionUUID->"66e43711-c1af-4b18-8462-2915f992e2f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552977, 10214, 1095, 32, 30, "Input",ExpressionUUID->"2f46e267-3cb5-441c-996d-970468f04773"],
Cell[554075, 10248, 3094, 95, 78, "Output",ExpressionUUID->"94c33d3f-28c2-4f9b-ac76-74b09c8030f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[557206, 10348, 322, 8, 30, "Input",ExpressionUUID->"56648277-2514-4208-8666-79e0404a1c6a"],
Cell[557531, 10358, 1776, 46, 56, "Output",ExpressionUUID->"b78f065e-4ae4-4084-b539-13fd5f68560c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[559344, 10409, 1181, 30, 30, "Input",ExpressionUUID->"c67b3040-65d3-4d51-ba84-f1ff6c0ece18"],
Cell[560528, 10441, 2102, 42, 469, "Output",ExpressionUUID->"9e2e6114-c19a-452b-b307-e8051aa5d252"]
}, Open  ]],
Cell[CellGroupData[{
Cell[562667, 10488, 753, 20, 30, "Input",ExpressionUUID->"7775f498-de10-4178-b817-ebb13f75a3c7"],
Cell[563423, 10510, 90962, 1978, 121, "Output",ExpressionUUID->"b88fdb8b-165e-4f23-a9d7-4b9ece1be41c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[654422, 12493, 937, 21, 30, "Input",ExpressionUUID->"54d7c62a-1aa4-48e4-a4c0-24f0907cc2bb"],
Cell[655362, 12516, 184, 3, 34, "Output",ExpressionUUID->"99a74d25-e8dd-461c-8e50-95146a10f0c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[655583, 12524, 1153, 30, 30, "Input",ExpressionUUID->"5ffc3c08-33aa-4809-b336-de0d5ff1527e"],
Cell[656739, 12556, 1879, 40, 469, "Output",ExpressionUUID->"b2da6962-021b-45d7-9c10-5def37242575"]
}, Open  ]],
Cell[CellGroupData[{
Cell[658655, 12601, 414, 10, 30, "Input",ExpressionUUID->"25021a48-1b8c-4406-95db-4f51f7369eb0"],
Cell[659072, 12613, 28293, 639, 112, "Output",ExpressionUUID->"242fb30b-10ac-439b-bb50-7116e9e1a460"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

